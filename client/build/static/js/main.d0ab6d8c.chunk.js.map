{"version":3,"sources":["components/Home/Home.js","components/Lobby/LobbyOptions.js","components/Lobby/Lobby.js","components/Game/Player.js","components/Game/Chat/Chat.js","components/Game/DrawingOptions/DrawingOptions.js","components/Game/Game.js","components/App/App.js","index.js"],"names":["Home","setAppView","socket","setLobby","useState","nickname","setNickname","useEffect","join","lobby","JSON","parse","inGame","on","off","className","onSubmit","e","preventDefault","lobbyId","URLSearchParams","window","location","search","keys","next","value","data","emit","type","placeholder","onChange","target","required","LobbyOptions","isAdmin","setRounds","rounds","newLobby","stringify","setTime","time","setWords","words","roundsChanged","timeChanged","wordsChanged","htmlFor","name","disabled","newRounds","defaultValue","newTime","newWords","split","Lobby","protocol","host","id","players","map","player","index","onClick","Player","setPlayer","style","backgroundColor","onTurn","guessed","points","Chat","messages","setMessages","messageSent","message","console","log","socketId","findIndex","sender","onKeyDown","key","find","p","sendMessage","DrawingOptions","isOnTurn","canvasRef","contextRef","drawColor","setDrawColor","setDrawMode","setDrawWidth","color","onColorChange","defaultChecked","width","onWidthChange","current","clearRect","height","Game","overlayContent","setOverlayContent","overlayActive","setOverlayActive","word","setWord","round","setRound","drawMode","drawWidth","useRef","timeCounter","getMousePos","rect","getBoundingClientRect","borderLeft","getComputedStyle","borderLeftWidth","borderTop","borderTopWidth","x","clientX","left","substring","length","y","clientY","top","startDrawing","pos","beginPath","moveTo","draw","lineTo","stroke","setInterval","context","getContext","colorChanged","widthChanged","clearCanvas","turnDataRequested","bufferT","getImageData","buffer","bufferB","array","Uint8ClampedArray","pictureData","turnDataSent","arrayT","arrayB","imageT","ImageData","imageB","putImageData","newPlayerOnTurn","setTimeout","forEach","lineCap","lineJoin","strokeStyle","lineWidth","_player","ref","onMouseDown","buttons","onMouseUp","button","onMouseMove","App","appView","setSocket","newSocket","io","close","playerJoined","push","playerDisconnected","splice","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d0ab6d8c.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport './Home.scss'\r\n\r\nfunction Home({setAppView, socket, setLobby}) \r\n{\r\n    const [nickname, setNickname] = useState('');\r\n\r\n    useEffect(() => \r\n    {\r\n        function join(lobby)\r\n        {\r\n            setLobby(JSON.parse(lobby));\r\n            if(JSON.parse(lobby).inGame)\r\n                setAppView('game');\r\n            else\r\n                setAppView('lobby');\r\n        }\r\n\r\n        socket.on('join', join);\r\n\r\n        return () => socket.off('join', join);\r\n    }, [setAppView, socket, setLobby]);\r\n    \r\n    function onSubmit(e)\r\n    {\r\n        e.preventDefault();\r\n\r\n        const searchParams = new URLSearchParams(window.location.search);\r\n        const lobbyId = searchParams.keys().next().value;\r\n\r\n        let data = {nickname: nickname, lobbyId: lobbyId}\r\n        socket.emit('join', data);\r\n    }\r\n\r\n    return (\r\n        <div className='Home'>\r\n            <h1>Home</h1>\r\n            <form onSubmit={onSubmit}>\r\n                <input type='text' placeholder='Nickname' value={nickname} onChange={e => setNickname(e.target.value)} required />\r\n                <button>Join Lobby</button>\r\n            </form>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Home;\r\n","import React, { useState, useEffect } from 'react';\r\n\r\nfunction LobbyOptions({socket, lobby, setLobby, isAdmin}) \r\n{    \r\n    useEffect(() => \r\n    {\r\n        function roundsChanged(rounds)\r\n        {\r\n            setRounds(rounds);\r\n        }\r\n\r\n        function timeChanged(time)\r\n        {\r\n            setTime(time);\r\n        }\r\n\r\n        function wordsChanged(words)\r\n        {\r\n            setWords(words);\r\n        }\r\n\r\n        socket.on('roundsChanged', roundsChanged);\r\n        socket.on('timeChanged', timeChanged);\r\n        socket.on('wordsChanged', wordsChanged);\r\n\r\n        return () =>\r\n        {\r\n            socket.off('roundsChanged', roundsChanged);\r\n            socket.off('timeChanged', timeChanged);\r\n            socket.off('wordsChanged', wordsChanged);\r\n        }\r\n    }, [socket, lobby]);\r\n\r\n    function onRoundsSelectChange(e)\r\n    {\r\n        if(isAdmin())\r\n        {\r\n            let newRounds = e.target.value;\r\n            setRounds(newRounds);\r\n\r\n            socket.emit('roundsChanged', newRounds);\r\n        }\r\n    }\r\n\r\n    function onTimeSelectChange(e)\r\n    {\r\n        if(isAdmin())\r\n        {\r\n            let newTime = e.target.value;\r\n            setTime(newTime);\r\n\r\n            socket.emit('timeChanged', newTime);\r\n        }\r\n    }\r\n\r\n    function onWordsTextAreaChange(e)\r\n    {\r\n        if(isAdmin())\r\n        {\r\n            let newWords = (e.target.value).split(',');\r\n            setWords(newWords);\r\n\r\n            socket.emit('wordsChanged', newWords);\r\n        }\r\n    }\r\n\r\n    function setRounds(rounds)\r\n    {\r\n        let newLobby = JSON.parse(JSON.stringify(lobby));\r\n        newLobby.rounds = rounds;\r\n        setLobby(newLobby);\r\n    }\r\n\r\n    function setTime(time)\r\n    {\r\n        let newLobby = JSON.parse(JSON.stringify(lobby));\r\n        newLobby.time = time;\r\n        setLobby(newLobby);\r\n    }\r\n\r\n    function setWords(words)\r\n    {\r\n        let newLobby = JSON.parse(JSON.stringify(lobby));\r\n        newLobby.words = words;\r\n        setLobby(newLobby);\r\n    }\r\n\r\n    return (\r\n        <div className=\"LobbyOptions\">\r\n            <label htmlFor=\"rounds\">Rounds</label>\r\n            <select className=\"rounds\" name=\"rounds\" disabled={!isAdmin()} value={lobby.rounds} onChange={onRoundsSelectChange}>\r\n                <option value=\"1\">1</option>\r\n                <option value=\"2\">2</option>\r\n                <option value=\"3\">3</option>\r\n                <option value=\"4\">4</option>\r\n                <option value=\"5\" defaultValue>5</option>\r\n                <option value=\"6\">6</option>\r\n                <option value=\"7\">7</option>\r\n                <option value=\"8\">8</option>\r\n                <option value=\"9\">9</option>\r\n                <option value=\"10\">10</option>\r\n            </select>\r\n            <label htmlFor=\"time\">Drawing time (seconds)</label>\r\n            <select className=\"time\" name=\"time\" disabled={!isAdmin()} value={lobby.time} onChange={onTimeSelectChange}>\r\n                <option value=\"10\">10</option>\r\n                <option value=\"20\">20</option>\r\n                <option value=\"30\">30</option>\r\n                <option value=\"40\">40</option>\r\n                <option value=\"50\">50</option>\r\n                <option value=\"60\">60</option>\r\n                <option value=\"70\">70</option>\r\n                <option value=\"80\">80</option>\r\n                <option value=\"90\" defaultValue>90</option>\r\n                <option value=\"100\">100</option>\r\n                <option value=\"110\">110</option>\r\n                <option value=\"120\">120</option>\r\n                <option value=\"130\">130</option>\r\n                <option value=\"140\">140</option>\r\n                <option value=\"150\">150</option>\r\n                <option value=\"160\">160</option>\r\n                <option value=\"170\">170</option>\r\n                <option value=\"180\">180</option>\r\n            </select>\r\n            <label htmlFor=\"words\">Words</label>\r\n            <textarea className=\"words\" value={lobby.words.join(',')} onChange={onWordsTextAreaChange} disabled={!isAdmin()}></textarea>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default LobbyOptions;\r\n","import React, { useEffect } from 'react';\r\nimport LobbyOptions from './LobbyOptions';\r\nimport './Lobby.scss'\r\n\r\nfunction Lobby({setAppView, socket, lobby, setLobby, isAdmin}) \r\n{\r\n    useEffect(() => \r\n    {\r\n        function joinGame()\r\n        {\r\n            setAppView('game');\r\n            socket.emit('ready');\r\n        }\r\n\r\n        socket.on('joinGame', joinGame);\r\n\r\n        return () => socket.off('joinGame');\r\n    }, [socket, setAppView])\r\n\r\n    function onClick()\r\n    {\r\n        socket.emit('joinGame');\r\n        setAppView('game');\r\n        socket.emit('ready');\r\n    }\r\n\r\n    return (\r\n        <div className='Lobby'>\r\n            <h1>Lobby</h1>\r\n            <strong>{window.location.protocol}//{window.location.host}/?{lobby.id}</strong>\r\n            <div className='options-players'>\r\n                <LobbyOptions socket={socket} lobby={lobby} setLobby={setLobby} isAdmin={isAdmin} />\r\n                <div className='players'>\r\n                    <label htmlFor='player-list'>Players</label>\r\n                    <div className='player-list'>\r\n                        {lobby.players.map((player, index) => <p key={index}>{player.nickname}</p>)}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <button onClick={onClick} disabled={!isAdmin()}>Start</button>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Lobby;\r\n","import React, { useEffect, useState } from 'react';\r\n\r\nfunction Player({lobby, index}) \r\n{\r\n    const [player, setPlayer] = useState(lobby.players[index]);\r\n\r\n    useEffect(() =>\r\n    {\r\n        setPlayer(lobby.players[index]);\r\n    }, [lobby, setPlayer])\r\n\r\n    return (\r\n        <div className='Player' style={{backgroundColor: player.onTurn ? 'blue' : player.guessed ? 'green' : 'gray'}}>\r\n            <p className='nickname'>{player.nickname}</p>\r\n            <p className=\"points\">{player.points}</p>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Player;","import React, { useEffect, useState } from 'react'\r\nimport './Chat.scss'\r\n\r\nfunction Chat({socket, lobby, setLobby}) \r\n{\r\n    const [messages, setMessages] = useState([]);\r\n\r\n    useEffect(() =>\r\n    {\r\n        function messageSent(message)\r\n        {\r\n            console.log(message);\r\n            setMessages([...messages, message]);\r\n        }\r\n\r\n        function playerGuessed(socketId)\r\n        {\r\n            let newLobby = JSON.parse(JSON.stringify(lobby));\r\n            let index = newLobby.players.findIndex(player => player.id === socketId);\r\n            newLobby.players[index].guessed = true;\r\n            setLobby(newLobby);\r\n            setMessages([...messages, {sender: 'Player ' + lobby.players[index].nickname, value: 'guessed the word!'}]);\r\n        }\r\n\r\n        socket.on('messageSent', messageSent);\r\n        socket.on('playerGuessed', playerGuessed);\r\n\r\n        return () =>\r\n        {\r\n            socket.off('messageSent', messageSent);\r\n        }\r\n    }, [socket, lobby, messages]);\r\n\r\n    function onKeyDown(e)\r\n    {\r\n        if(e.key === 'Enter')\r\n        {\r\n            let message = {sender: lobby.players.find(p => p.id === socket.id).nickname, value: e.target.value};\r\n            e.target.value = '';\r\n            setMessages([...messages, message]);\r\n            sendMessage(message);\r\n        }\r\n    }\r\n\r\n    function sendMessage(message)\r\n    {\r\n        console.log(message);\r\n        socket.emit('messageSent', message);\r\n    }\r\n\r\n    return (\r\n        <div className='Chat'>\r\n            <div className='messages'>\r\n                {messages.map((message, index) => <p className='message' key={index}>{message.sender}: {message.value}</p>)}\r\n            </div>\r\n            <input type='text' onKeyDown={onKeyDown}/>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Chat\r\n","import React from 'react';\r\nimport './DrawingOptions.scss'\r\n\r\nfunction DrawingOptions({socket, isOnTurn, canvasRef, contextRef, drawColor, setDrawColor, setDrawMode, setDrawWidth}) \r\n{\r\n    const colors = ['#ffffff', \r\n                    '#000000', \r\n                    '#b9b9b9', \r\n                    '#7d8180', \r\n                    '#e0222c', \r\n                    '#92000d', \r\n                    '#f98a21', \r\n                    '#f4620b', \r\n                    '#ffd011', \r\n                    '#f5bb00', \r\n                    '#63ba2d', \r\n                    '#267637', \r\n                    '#78cdf2', \r\n                    '#009ada', \r\n                    '#0060b4', \r\n                    '#022c78', \r\n                    '#8b159f', \r\n                    '#5b1577', \r\n                    '#df177a', \r\n                    '#ab1b7a', \r\n                    '#ba5901', \r\n                    '#763100',];\r\n\r\n        const widths = [3, 10, 25, 40];\r\n\r\n    function onColorChange(color)\r\n    {\r\n        if(isOnTurn())\r\n        {\r\n            setDrawColor(color);\r\n            socket.emit('colorChanged', color);\r\n        }\r\n    }\r\n\r\n    function onModeChange(e)\r\n    {\r\n        if(isOnTurn())\r\n        {\r\n            setDrawMode(e.target.value);\r\n        }\r\n    }\r\n\r\n    function onWidthChange(width)\r\n    {\r\n        if(isOnTurn())\r\n        {\r\n            setDrawWidth(width);\r\n            socket.emit('widthChanged', width);\r\n        }\r\n    }\r\n\r\n    function onClearCanvas()\r\n    {\r\n        if(isOnTurn())\r\n        {\r\n            contextRef.current.clearRect(0, 0, canvasRef.current.width, canvasRef.current.height);\r\n            socket.emit('clearCanvas');\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className='DrawingOptions'>\r\n                <div className='current-color' style={{backgroundColor: isOnTurn() ? drawColor : '#000000'}} />\r\n                <div className='colors'>\r\n                    {colors.map((color, index) => <button key={index} style={{backgroundColor: color}} onClick={() => onColorChange(color)} disabled={!isOnTurn()} />)}\r\n                </div>\r\n                <div className='drawing-modes' onChange={onModeChange}>\r\n                    <input type=\"radio\" name='mode' value={'brush'} className='brush' defaultChecked disabled={!isOnTurn()} />\r\n                    <input type=\"radio\" name='mode' value={'line'} className='line' disabled={!isOnTurn()} />\r\n                </div>\r\n                <div className='brush-size'>\r\n                    {widths.map((width, index) => <button key={index} onClick={() => onWidthChange(width)} disabled={!isOnTurn()} />)}\r\n                </div>\r\n                <div className='clear-canvas'>\r\n                    <button onClick={() => onClearCanvas()} disabled={!isOnTurn()} />\r\n                </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default DrawingOptions;\r\n","import React, { useEffect, useRef, useState } from 'react';\r\nimport Player from './Player'\r\nimport Chat from './Chat/Chat';\r\nimport DrawingOptions from './DrawingOptions/DrawingOptions';\r\nimport './Game.scss'\r\n\r\nfunction Game({socket, lobby, setLobby, isAdmin, isOnTurn}) \r\n{\r\n    const [overlayContent, setOverlayContent] = useState('');\r\n    const [overlayActive, setOverlayActive] = useState('');\r\n    const [time, setTime] = useState(lobby.time);\r\n    const [word, setWord] = useState('');\r\n    const [round, setRound] = useState(0);\r\n\r\n    const [drawColor, setDrawColor] = useState('#000000');\r\n    const [drawMode, setDrawMode] = useState('brush');\r\n    const [drawWidth, setDrawWidth] = useState(15);\r\n\r\n    const canvasRef = useRef(null);\r\n    const contextRef = useRef(null);\r\n\r\n    const timeCounter = useRef(-1);\r\n\r\n    useEffect(() =>\r\n    {\r\n        socket.emit('turnDataRequested', socket.id);\r\n        \r\n        setInterval(() => {\r\n            if(timeCounter.current >= 0)\r\n            {\r\n                console.log(timeCounter.current);\r\n                setTime(timeCounter.current);\r\n                timeCounter.current--;\r\n            }\r\n        }, 1000);\r\n    }, []);\r\n\r\n    useEffect(() =>\r\n    {\r\n        const context = canvasRef.current.getContext('2d');\r\n        context.lineCap = 'round';\r\n        context.lineJoin = 'round';\r\n        context.strokeStyle = drawColor;\r\n        context.lineWidth = drawWidth;\r\n        context.beginPath();\r\n        contextRef.current = context;\r\n\r\n        function colorChanged(color)\r\n        {\r\n            setDrawColor(color);\r\n        }\r\n\r\n        function widthChanged(width)\r\n        {\r\n            setDrawWidth(width);\r\n        }\r\n\r\n        function clearCanvas()\r\n        {\r\n            context.clearRect(0, 0, canvasRef.current.width, canvasRef.current.height);\r\n        }\r\n\r\n        function turnDataRequested(socketId)\r\n        {\r\n            if(isAdmin())\r\n            {\r\n                let bufferT = context.getImageData(0, 0, 800, 300).data.buffer;\r\n                let bufferB = context.getImageData(0, 300, 800, 300).data.buffer;\r\n                let arrayT = new Uint8ClampedArray(bufferT);\r\n                let arrayB = new Uint8ClampedArray(bufferB);\r\n                let array = [arrayT, arrayB];\r\n                let data = {socketId: socketId, timeCounter: timeCounter.current, pictureData: array};\r\n                socket.emit('turnDataSent', data);\r\n            }\r\n        }\r\n\r\n        function turnDataSent(data)\r\n        {\r\n            if(data.timeCounter != -1)\r\n                setTime(data.timeCounter - 1);\r\n            timeCounter.current = data.timeCounter - 1;\r\n\r\n            let arrayT = new Uint8ClampedArray(data.pictureData[0]);\r\n            let arrayB = new Uint8ClampedArray(data.pictureData[1]);\r\n            let imageT = new ImageData(arrayT, 800, 300);\r\n            let imageB = new ImageData(arrayB, 800, 300);\r\n            context.putImageData(imageT, 0, 0);\r\n            context.putImageData(imageB, 0, 300);\r\n        }\r\n\r\n        function newPlayerOnTurn(data)\r\n        {\r\n            startTurn();\r\n\r\n            let newLobby = JSON.parse(JSON.stringify(lobby));\r\n            newLobby.players.forEach(player => player.onTurn = false);\r\n            newLobby.players.forEach(player => player.guessed = false);\r\n            newLobby.players[data[0]].onTurn = true;\r\n            setLobby(newLobby);\r\n            \r\n            setWord(data[1]);\r\n\r\n            if(data[0] == lobby.players.findIndex(player => player.id === socket.id))\r\n                setOverlayContent(<p>YOU WILL BE DRAWING<br/>{data[1]}</p>);\r\n            else\r\n                setOverlayContent(<p>NEXT WILL BE DRAWING<br/>{lobby.players[data[0]].nickname}</p>);\r\n        }\r\n\r\n        function startTurn()\r\n        {\r\n            timeCounter.current = -1;\r\n            setTime(lobby.time);\r\n            setRound(round + 1);\r\n            setOverlayActive(' active');\r\n            clearCanvas();\r\n\r\n            setTimeout(() => {\r\n                setOverlayActive('');\r\n                timeCounter.current = lobby.time;\r\n            }, 2000);\r\n        }\r\n\r\n        socket.on('startDrawing', startDrawing);\r\n        socket.on('draw', draw);\r\n        socket.on('colorChanged', colorChanged);\r\n        socket.on('widthChanged', widthChanged);\r\n        socket.on('clearCanvas', clearCanvas);\r\n        socket.on('turnDataRequested', turnDataRequested);\r\n        socket.on('turnDataSent', turnDataSent);\r\n        socket.on('newPlayerOnTurn', newPlayerOnTurn);\r\n\r\n        return () =>\r\n        {\r\n            socket.off('startDrawing', startDrawing);\r\n            socket.off('draw', draw);\r\n            socket.off('colorChanged', colorChanged);\r\n            socket.off('widthChanged', widthChanged);\r\n            socket.off('clearCanvas', clearCanvas);\r\n            socket.off('turnDataRequested', turnDataRequested);\r\n            socket.off('turnDataSent', turnDataSent);\r\n            socket.off('newPlayerOnTurn', newPlayerOnTurn);\r\n        }\r\n    }, [socket, lobby, setLobby, isAdmin, time, setTime, drawColor, drawMode, drawWidth]);\r\n\r\n    function onMouseDown(e)\r\n    {\r\n        if(e.buttons !== 1   || !isOnTurn())\r\n            return;\r\n\r\n        let pos = getMousePos(e);\r\n\r\n        if(drawMode === 'brush')\r\n        {\r\n            startDrawing(pos);\r\n            draw(pos);\r\n    \r\n            socket.emit('startDrawing', pos);\r\n            socket.emit('draw', pos);\r\n        }\r\n        else if(drawMode === 'line')\r\n        {\r\n            startDrawing(pos);\r\n    \r\n            socket.emit('startDrawing', pos);\r\n        }\r\n    }\r\n\r\n    function onMouseUp(e)\r\n    {\r\n        if(e.button !== 0 || !isOnTurn())\r\n            return;\r\n\r\n        let pos = getMousePos(e);\r\n\r\n        if(drawMode === 'line')\r\n        {\r\n            draw(pos);\r\n    \r\n            socket.emit('draw', pos);\r\n        }\r\n    }\r\n\r\n    function onMouseMove(e)\r\n    {\r\n        if(e.buttons !== 1 || !isOnTurn())\r\n            return;\r\n\r\n        let pos = getMousePos(e);\r\n\r\n        if(drawMode === 'brush')\r\n        {\r\n            draw(pos);\r\n    \r\n            socket.emit('draw', pos);\r\n        }\r\n    }\r\n\r\n    function getMousePos(e)\r\n    {\r\n        let rect = canvasRef.current.getBoundingClientRect();\r\n        let borderLeft = getComputedStyle(canvasRef.current).borderLeftWidth;\r\n        let borderTop = getComputedStyle(canvasRef.current).borderTopWidth;\r\n\r\n        const x = e.clientX - rect.left - borderLeft.substring(0, borderLeft.length - 2);\r\n        const y = e.clientY - rect.top - borderTop.substring(0, borderTop.length - 2);\r\n        let pos = {x: x, y: y};\r\n\r\n        return pos;\r\n    }\r\n\r\n    function startDrawing(pos)\r\n    {\r\n        contextRef.current.beginPath();\r\n        contextRef.current.moveTo(pos.x, pos.y);\r\n    }\r\n\r\n    function draw(pos)\r\n    {\r\n        contextRef.current.lineTo(pos.x, pos.y);\r\n        contextRef.current.stroke();\r\n    }\r\n\r\n    return (\r\n        <div className='Game'>\r\n            <h1>Game</h1>\r\n            <div className='info'>\r\n                <div className='time'>\r\n                    <p>Time: {time}</p>\r\n                </div>\r\n                <div className='word'>\r\n                    <p>{word}</p>\r\n                </div>\r\n                <div className='rounds'>\r\n                    <p>Round: {round}/{lobby.rounds}</p>\r\n                </div>\r\n            </div>\r\n            <div className='players-game-chat'>\r\n                <div className='player-list'>\r\n                    {lobby.players.map((_player, index) => <Player key={index} lobby={lobby} index={index}/>)}\r\n                </div>\r\n                <div className='canvas'>\r\n                    <div className={'overlay' + overlayActive}>\r\n                        {overlayContent}\r\n                    </div>\r\n                    <canvas width='800' height='600' ref={canvasRef} onMouseDown={onMouseDown} onMouseUp={onMouseUp} onMouseMove={onMouseMove} />\r\n                </div>\r\n                <Chat socket={socket} lobby={lobby} setLobby={setLobby} />\r\n            </div>\r\n            <DrawingOptions socket={socket} isOnTurn={isOnTurn} canvasRef={canvasRef} contextRef={contextRef} drawColor={drawColor} setDrawColor={setDrawColor} setDrawMode={setDrawMode} setDrawWidth={setDrawWidth} />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Game;\r\n","import { useState, useEffect } from 'react';\r\nimport io from 'socket.io-client';\r\nimport Home from '../Home/Home';\r\nimport Lobby from '../Lobby/Lobby';\r\nimport Game from '../Game/Game'\r\nimport './App.scss'\r\n\r\nfunction App() \r\n{\r\n    const [appView, setAppView] = useState('home'); //home, lobby, game\r\n    const [socket, setSocket] = useState();\r\n    const [lobby, setLobby] = useState();\r\n\r\n    useEffect(() => \r\n    {\r\n        const newSocket = io();\r\n        setSocket(newSocket);\r\n\r\n        return () => \r\n        {\r\n            newSocket.close();\r\n        }\r\n    }, [setSocket]);\r\n\r\n    useEffect(() =>\r\n    {\r\n        function playerJoined(player)\r\n        {\r\n            let newLobby = JSON.parse(JSON.stringify(lobby));\r\n            newLobby.players.push(player);\r\n            setLobby(newLobby);\r\n        }\r\n\r\n        function playerDisconnected(id)\r\n        {\r\n            let newLobby = JSON.parse(JSON.stringify(lobby));\r\n            let index = newLobby.players.findIndex(player => player.id === id);\r\n            newLobby.players.splice(index, 1);\r\n            setLobby(newLobby);\r\n        }\r\n\r\n        if(socket)\r\n        {\r\n            socket.on('playerJoined', playerJoined);\r\n            socket.on('playerDisconnected', playerDisconnected);\r\n        }\r\n\r\n        return () => \r\n        {\r\n            if(socket)\r\n            {\r\n                socket.off('playerJoined', playerJoined);\r\n                socket.off('playerDisconnected', playerDisconnected);\r\n            }\r\n        }\r\n    }, [socket, lobby, setLobby]);\r\n\r\n    function isAdmin()\r\n    {\r\n        return socket.id === lobby.players[0].id;\r\n    }\r\n\r\n    function isOnTurn()\r\n    {\r\n        return lobby.players.find(p => socket.id === p.id).onTurn;\r\n    }\r\n\r\n    return (\r\n        <div className='App'>\r\n            {appView === 'home' && socket && <Home setAppView={setAppView} socket={socket} setLobby={setLobby} />}\r\n            {appView === 'lobby' && lobby && <Lobby setAppView={setAppView} socket={socket} lobby={lobby} setLobby={setLobby} isAdmin={isAdmin} />}\r\n            {appView === 'game' && <Game socket={socket} lobby={lobby} setLobby={setLobby} isAdmin={isAdmin} isOnTurn={isOnTurn} />}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './components/App/App';\r\n\r\nReactDOM.render\r\n(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);"],"sourceRoot":""}