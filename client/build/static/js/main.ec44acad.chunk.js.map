{"version":3,"sources":["components/Home/Home.js","components/Lobby/LobbyOptions.js","components/Lobby/Lobby.js","components/Game/Player.js","components/Game/Chat/Chat.js","components/Game/DrawingOptions/DrawingOptions.js","components/Game/Game.js","components/App/App.js","index.js"],"names":["Home","setAppView","socket","setLobby","useState","nickname","setNickname","useEffect","join","lobby","parsedLobby","JSON","parse","inGame","url","URL","window","location","searchParams","set","id","history","replaceState","on","off","className","onSubmit","e","preventDefault","lobbyId","URLSearchParams","search","get","data","emit","type","placeholder","value","onChange","target","required","LobbyOptions","isAdmin","setRounds","rounds","newLobby","stringify","setTime","time","setWords","words","roundsChanged","timeChanged","wordsChanged","htmlFor","name","disabled","newRounds","defaultValue","newTime","newWords","split","Lobby","protocol","host","players","map","player","index","onClick","Player","setPlayer","style","backgroundColor","onTurn","guessed","points","Chat","messages","setMessages","messageSent","message","playerGuessed","findIndex","pointsThisTurn","sender","onKeyDown","key","find","p","sendMessage","DrawingOptions","isOnTurn","canvasRef","contextRef","drawColor","setDrawColor","setDrawMode","setDrawWidth","color","onColorChange","defaultChecked","width","onWidthChange","current","clearRect","height","Game","overlayContent","setOverlayContent","overlayActive","setOverlayActive","word","setWord","round","setRound","drawMode","drawWidth","useRef","timeCounter","getMousePos","rect","getBoundingClientRect","borderLeft","getComputedStyle","borderLeftWidth","borderTop","borderTopWidth","x","clientX","left","substring","length","y","clientY","top","startDrawing","pos","beginPath","moveTo","draw","lineTo","stroke","setInterval","context","getContext","colorChanged","widthChanged","clearCanvas","turnDataRequested","socketId","bufferT","getImageData","buffer","bufferB","array","Uint8ClampedArray","pictureData","turnDataSent","arrayT","arrayB","imageT","ImageData","imageB","putImageData","newPlayerOnTurn","forEach","startTurn","endTurn","endGame","restartGame","lineCap","lineJoin","strokeStyle","lineWidth","_player","ref","onMouseDown","buttons","onMouseUp","button","onMouseMove","App","appView","setSocket","newSocket","io","close","playerJoined","push","playerDisconnected","splice","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ec44acad.chunk.js","sourcesContent":["/** @module Home */\r\n\r\nimport React, { useEffect, useState } from 'react';\r\nimport './Home.scss'\r\n\r\nfunction Home({setAppView, socket, setLobby}) \r\n{\r\n    const [nickname, setNickname] = useState('');\r\n    \r\n    useEffect(() => \r\n    {\r\n        /**\r\n         * Sets the lobby recieved from the server and switches the view.\r\n         * @function join\r\n         * @param {Object} lobby Lobby object.\r\n         */\r\n        function join(lobby)\r\n        {\r\n            let parsedLobby = JSON.parse(lobby);\r\n            setLobby(parsedLobby);\r\n            if(parsedLobby.inGame)\r\n            {\r\n                setAppView('game');\r\n            }\r\n            else\r\n            {\r\n                const url = new URL(window.location);\r\n                url.searchParams.set('id', parsedLobby.id);\r\n                window.history.replaceState({}, '', url);\r\n                setAppView('lobby');\r\n            }    \r\n        }\r\n\r\n        socket.on('join', join);\r\n\r\n        return () => socket.off('join', join);\r\n    }, [setAppView, socket, setLobby]);\r\n    \r\n    /**\r\n     * Sends join request to the server.\r\n     * @function onSubmit\r\n     * @param {Event} e Form submit event.\r\n     */\r\n    function onSubmit(e)\r\n    {\r\n        e.preventDefault();\r\n\r\n        const searchParams = new URLSearchParams(window.location.search);\r\n        const lobbyId = searchParams.get('id');\r\n\r\n        let data = {nickname: nickname, lobbyId: lobbyId}\r\n        socket.emit('join', data);\r\n    }\r\n\r\n    return (\r\n        <div className='Home'>\r\n            <h1>Home</h1>\r\n            <form onSubmit={onSubmit}>\r\n                <input type='text' placeholder='Nickname' value={nickname} onChange={e => setNickname(e.target.value)} required />\r\n                <button>Join Lobby</button>\r\n            </form>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Home;\r\n","/** @module LobbyOptions */\r\n\r\nimport React, { useState, useEffect } from 'react';\r\n\r\nfunction LobbyOptions({socket, lobby, setLobby, isAdmin}) \r\n{    \r\n    useEffect(() => \r\n    {\r\n        /**\r\n         * Sets the new round count.\r\n         * @function roundsChanged\r\n         * @param {number} rounds Number of rounds for the game.\r\n         */\r\n        function roundsChanged(rounds)\r\n        {\r\n            setRounds(rounds);\r\n        }\r\n\r\n        /**\r\n         * Sets the new time in a turn.\r\n         * @function timeChanged\r\n         * @param {number} time Amount of time in a turn.\r\n         */\r\n        function timeChanged(time)\r\n        {\r\n            setTime(time);\r\n        }\r\n\r\n        /**\r\n         * Sets the new word array.\r\n         * @function wordsChanged\r\n         * @param {string[]} words Array of the words for the game.\r\n         */\r\n        function wordsChanged(words)\r\n        {\r\n            setWords(words);\r\n        }\r\n\r\n        socket.on('roundsChanged', roundsChanged);\r\n        socket.on('timeChanged', timeChanged);\r\n        socket.on('wordsChanged', wordsChanged);\r\n\r\n        return () =>\r\n        {\r\n            socket.off('roundsChanged', roundsChanged);\r\n            socket.off('timeChanged', timeChanged);\r\n            socket.off('wordsChanged', wordsChanged);\r\n        }\r\n    }, [socket, lobby]);\r\n\r\n    /**\r\n     * Transmits the round count change if this socket is an admin.\r\n     * @function onRoundsSelectChange\r\n     * @param {Event} e Select change event.\r\n     */\r\n    function onRoundsSelectChange(e)\r\n    {\r\n        if(isAdmin())\r\n        {\r\n            let newRounds = e.target.value;\r\n            setRounds(newRounds);\r\n\r\n            socket.emit('roundsChanged', newRounds);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Transmits the time amount change if this socket is an admin.\r\n     * @function onTimeSelectChange\r\n     * @param {Event} e Select change event.\r\n     */\r\n    function onTimeSelectChange(e)\r\n    {\r\n        if(isAdmin())\r\n        {\r\n            let newTime = e.target.value;\r\n            setTime(newTime);\r\n\r\n            socket.emit('timeChanged', newTime);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Transmits the word array change if this socket is and admin.\r\n     * @function onWordsTextAreaChange\r\n     * @param {Event} e Text area change event.\r\n     */\r\n    function onWordsTextAreaChange(e)\r\n    {\r\n        if(isAdmin())\r\n        {\r\n            let newWords = (e.target.value).split(',');\r\n            setWords(newWords);\r\n\r\n            socket.emit('wordsChanged', newWords);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sets the rounds for the game.\r\n     * @function setRounds\r\n     * @param {number} rounds Number of rounds for the game.\r\n     */\r\n    function setRounds(rounds)\r\n    {\r\n        let newLobby = JSON.parse(JSON.stringify(lobby));\r\n        newLobby.rounds = rounds;\r\n        setLobby(newLobby);\r\n    }\r\n\r\n    /**\r\n     * Sets the time in a round.\r\n     * @function setTime\r\n     * @param {number} time Amount of time in a turn.\r\n     */\r\n    function setTime(time)\r\n    {\r\n        let newLobby = JSON.parse(JSON.stringify(lobby));\r\n        newLobby.time = time;\r\n        setLobby(newLobby);\r\n    }\r\n\r\n    /**\r\n     * Sets the word array for the game.\r\n     * @function setWords\r\n     * @param {string[]} words Word array.\r\n     */\r\n    function setWords(words)\r\n    {\r\n        let newLobby = JSON.parse(JSON.stringify(lobby));\r\n        newLobby.words = words;\r\n        setLobby(newLobby);\r\n    }\r\n\r\n    return (\r\n        <div className=\"LobbyOptions\">\r\n            <label htmlFor=\"rounds\">Rounds</label>\r\n            <select className=\"rounds\" name=\"rounds\" disabled={!isAdmin()} value={lobby.rounds} onChange={onRoundsSelectChange}>\r\n                <option value=\"1\">1</option>\r\n                <option value=\"2\">2</option>\r\n                <option value=\"3\">3</option>\r\n                <option value=\"4\">4</option>\r\n                <option value=\"5\" defaultValue>5</option>\r\n                <option value=\"6\">6</option>\r\n                <option value=\"7\">7</option>\r\n                <option value=\"8\">8</option>\r\n                <option value=\"9\">9</option>\r\n                <option value=\"10\">10</option>\r\n            </select>\r\n            <label htmlFor=\"time\">Drawing time (seconds)</label>\r\n            <select className=\"time\" name=\"time\" disabled={!isAdmin()} value={lobby.time} onChange={onTimeSelectChange}>\r\n                <option value=\"10\">10</option>\r\n                <option value=\"20\">20</option>\r\n                <option value=\"30\">30</option>\r\n                <option value=\"40\">40</option>\r\n                <option value=\"50\">50</option>\r\n                <option value=\"60\">60</option>\r\n                <option value=\"70\">70</option>\r\n                <option value=\"80\">80</option>\r\n                <option value=\"90\" defaultValue>90</option>\r\n                <option value=\"100\">100</option>\r\n                <option value=\"110\">110</option>\r\n                <option value=\"120\">120</option>\r\n                <option value=\"130\">130</option>\r\n                <option value=\"140\">140</option>\r\n                <option value=\"150\">150</option>\r\n                <option value=\"160\">160</option>\r\n                <option value=\"170\">170</option>\r\n                <option value=\"180\">180</option>\r\n            </select>\r\n            <label htmlFor=\"words\">Words</label>\r\n            <textarea className=\"words\" value={lobby.words.join(',')} onChange={onWordsTextAreaChange} disabled={!isAdmin()}></textarea>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default LobbyOptions;\r\n","/** @module Lobby */\r\n\r\nimport React, { useEffect } from 'react';\r\nimport LobbyOptions from './LobbyOptions';\r\nimport './Lobby.scss'\r\n\r\nfunction Lobby({setAppView, socket, lobby, setLobby, isAdmin}) \r\n{\r\n    useEffect(() => \r\n    {\r\n        /**\r\n         * Switches to the game view transmits to the server, that this socket is ready.\r\n         * @function joinGame\r\n         */\r\n        function joinGame()\r\n        {\r\n            setAppView('game');\r\n            socket.emit('ready');\r\n        }\r\n\r\n        socket.on('joinGame', joinGame);\r\n\r\n        return () => socket.off('joinGame');\r\n    }, [socket, setAppView])\r\n\r\n    /**\r\n     * Transmits to the server, that others can start joining the game.\r\n     * Switches to the game view and transmits to the server, that this socket is ready.\r\n     * @function onClick\r\n     */\r\n    function onClick()\r\n    {\r\n        socket.emit('joinGame');\r\n        setAppView('game');\r\n        socket.emit('ready');\r\n    }\r\n\r\n    return (\r\n        <div className='Lobby'>\r\n            <h1>Lobby</h1>\r\n            <strong>{window.location.protocol}//{window.location.host}/?id={lobby.id}</strong>\r\n            <div className='options-players'>\r\n                <LobbyOptions socket={socket} lobby={lobby} setLobby={setLobby} isAdmin={isAdmin} />\r\n                <div className='players'>\r\n                    <label htmlFor='player-list'>Players</label>\r\n                    <div className='player-list'>\r\n                        {lobby.players.map((player, index) => <p key={index}>{player.nickname}</p>)}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <button onClick={onClick} disabled={!isAdmin()}>Start</button>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Lobby;\r\n","import React, { useEffect, useState } from 'react';\r\n\r\nfunction Player({lobby, index}) \r\n{\r\n    const [player, setPlayer] = useState(lobby.players[index]);\r\n\r\n    useEffect(() =>\r\n    {\r\n        setPlayer(lobby.players[index]);\r\n    }, [lobby, setPlayer])\r\n\r\n    return (\r\n        <div className='Player' style={{backgroundColor: player.onTurn ? '#6ed1ff' : player.guessed ? '#6eff8b' : 'gray'}}>\r\n            <p className='nickname'>{player.nickname}</p>\r\n            <p className=\"points\">{player.points}</p>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Player;","/** @module Chat */\r\n\r\nimport React, { useEffect, useState } from 'react'\r\nimport './Chat.scss'\r\n\r\nfunction Chat({socket, lobby, setLobby}) \r\n{\r\n    const [messages, setMessages] = useState([]);\r\n\r\n    useEffect(() =>\r\n    {\r\n        /**\r\n         * Adds the recieved message to the message array.\r\n         * @function messageSent\r\n         * @param {Object} message Object containing the message sender and the message's content.\r\n         */\r\n        function messageSent(message)\r\n        {\r\n            setMessages([...messages, message]);\r\n        }\r\n\r\n        /**\r\n         * Set the player's points and shows who guessed the word.\r\n         * @function playerGuessed\r\n         * @param {Object} data Object containing the player's socket id and the amount of points recieved.\r\n         */\r\n        function playerGuessed(data)\r\n        {\r\n            let newLobby = JSON.parse(JSON.stringify(lobby));\r\n            let index = newLobby.players.findIndex(player => player.id === data[0]);\r\n            newLobby.players[index].guessed = true;\r\n            newLobby.players[index].points += data[1];\r\n            newLobby.players[index].pointsThisTurn = data[1];\r\n            setLobby(newLobby);\r\n            setMessages([...messages, {sender: 'Player ' + lobby.players[index].nickname, value: 'guessed the word!'}]);\r\n        }\r\n\r\n        socket.on('messageSent', messageSent);\r\n        socket.on('playerGuessed', playerGuessed);\r\n\r\n        return () =>\r\n        {\r\n            socket.off('messageSent', messageSent);\r\n            socket.off('playerGuessed', playerGuessed);\r\n        }\r\n    }, [socket, lobby, setLobby, messages]);\r\n\r\n    /**\r\n     * Sends the message, when the user presses Enter.\r\n     * @function onKeyDown\r\n     * @param {Event} e OnKeyDown event object.\r\n     */\r\n    function onKeyDown(e)\r\n    {\r\n        if(e.key === 'Enter')\r\n        {\r\n            let message = {sender: lobby.players.find(p => p.id === socket.id).nickname, value: e.target.value};\r\n            e.target.value = '';\r\n            setMessages([...messages, message]);\r\n            sendMessage(message);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Transmits the message to the server.\r\n     * @function sendMessage\r\n     * @param {Object} message Object containing the message sender and the message's content.\r\n     */\r\n    function sendMessage(message)\r\n    {\r\n        socket.emit('messageSent', message);\r\n    }\r\n\r\n    return (\r\n        <div className='Chat'>\r\n            <div className='messages'>\r\n                {messages.map((message, index) => <p className='message' key={index}>{message.sender}: {message.value}</p>)}\r\n            </div>\r\n            <input type='text' onKeyDown={onKeyDown}/>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Chat\r\n","/** @module DrawingOptions */\r\n\r\nimport React from 'react';\r\nimport './DrawingOptions.scss'\r\n\r\nfunction DrawingOptions({socket, isOnTurn, canvasRef, contextRef, drawColor, setDrawColor, setDrawMode, setDrawWidth}) \r\n{\r\n    const colors = ['#ffffff', \r\n                    '#000000', \r\n                    '#b9b9b9', \r\n                    '#7d8180', \r\n                    '#e0222c', \r\n                    '#92000d', \r\n                    '#f98a21', \r\n                    '#f4620b', \r\n                    '#ffd011', \r\n                    '#f5bb00', \r\n                    '#63ba2d', \r\n                    '#267637', \r\n                    '#78cdf2', \r\n                    '#009ada', \r\n                    '#0060b4', \r\n                    '#022c78', \r\n                    '#8b159f', \r\n                    '#5b1577', \r\n                    '#df177a', \r\n                    '#ab1b7a', \r\n                    '#ba5901', \r\n                    '#763100',];\r\n\r\n    const widths = [3, 10, 25, 40];\r\n\r\n    /**\r\n     * Changes the color and transmits it to others in the lobby if this socket is on turn.\r\n     * @function onColorChange\r\n     * @param {string} color Hex value of the new color. \r\n     */\r\n    function onColorChange(color)\r\n    {\r\n        if(isOnTurn())\r\n        {\r\n            setDrawColor(color);\r\n            socket.emit('colorChanged', color);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Changes the drawing mode and transmits it to the others in the lobby if this socket is on turn.\r\n     * @function onModeChange\r\n     * @param {Event} e Radio button click event.\r\n     */\r\n    function onModeChange(e)\r\n    {\r\n        if(isOnTurn())\r\n        {\r\n            setDrawMode(e.target.value);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Changes the brush width and transmits it to others in the lobby if this socket is on turn.\r\n     * @function onWidthChange\r\n     * @param {number} width New brush width value.\r\n     */\r\n    function onWidthChange(width)\r\n    {\r\n        if(isOnTurn())\r\n        {\r\n            setDrawWidth(width);\r\n            socket.emit('widthChanged', width);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Clears the canvas and transmits it to others in the lobby if this socket is on turn.\r\n     * @function onClearCanvas\r\n     */\r\n    function onClearCanvas()\r\n    {\r\n        if(isOnTurn())\r\n        {\r\n            contextRef.current.clearRect(0, 0, canvasRef.current.width, canvasRef.current.height);\r\n            socket.emit('clearCanvas');\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className='DrawingOptions'>\r\n                <div className='current-color' style={{backgroundColor: isOnTurn() ? drawColor : '#000000'}} />\r\n                <div className='colors'>\r\n                    {colors.map((color, index) => <button key={index} style={{backgroundColor: color}} onClick={() => onColorChange(color)} disabled={!isOnTurn()} />)}\r\n                </div>\r\n                <div className='drawing-modes' onChange={onModeChange}>\r\n                    <input type=\"radio\" name='mode' value={'brush'} className='brush' defaultChecked disabled={!isOnTurn()} />\r\n                    <input type=\"radio\" name='mode' value={'line'} className='line' disabled={!isOnTurn()} />\r\n                </div>\r\n                <div className='brush-size'>\r\n                    {widths.map((width, index) => <button key={index} onClick={() => onWidthChange(width)} disabled={!isOnTurn()} />)}\r\n                </div>\r\n                <div className='clear-canvas'>\r\n                    <button onClick={() => onClearCanvas()} disabled={!isOnTurn()} />\r\n                </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default DrawingOptions;\r\n","/** @module Game */\r\n\r\nimport React, { useEffect, useRef, useState } from 'react';\r\nimport Player from './Player'\r\nimport Chat from './Chat/Chat';\r\nimport DrawingOptions from './DrawingOptions/DrawingOptions';\r\nimport './Game.scss'\r\n\r\nfunction Game({setAppView, socket, lobby, setLobby, isAdmin, isOnTurn}) \r\n{\r\n    const [overlayContent, setOverlayContent] = useState('');\r\n    const [overlayActive, setOverlayActive] = useState(' active');\r\n    const [time, setTime] = useState(lobby.time);\r\n    const [word, setWord] = useState('');\r\n    const [round, setRound] = useState(0);\r\n\r\n    const [drawColor, setDrawColor] = useState('#000000');\r\n    const [drawMode, setDrawMode] = useState('brush');\r\n    const [drawWidth, setDrawWidth] = useState(15);\r\n\r\n    const canvasRef = useRef(null);\r\n    const contextRef = useRef(null);\r\n\r\n    const timeCounter = useRef(-1);\r\n\r\n    useEffect(() =>\r\n    {\r\n        socket.emit('turnDataRequested', socket.id);\r\n        \r\n        setInterval(() => {\r\n            if(timeCounter.current >= 0)\r\n            {\r\n                setTime(timeCounter.current);\r\n                timeCounter.current--;\r\n            }\r\n        }, 1000);\r\n    }, []);\r\n\r\n    useEffect(() =>\r\n    {\r\n        const context = canvasRef.current.getContext('2d');\r\n        context.lineCap = 'round';\r\n        context.lineJoin = 'round';\r\n        context.strokeStyle = drawColor;\r\n        context.lineWidth = drawWidth;\r\n        context.beginPath();\r\n        contextRef.current = context;\r\n\r\n        /**\r\n         * Sets the new color.\r\n         * @function colorChanged\r\n         * @param {string} color Hex value of the new color.\r\n         */\r\n        function colorChanged(color)\r\n        {\r\n            setDrawColor(color);\r\n        }\r\n\r\n        /**\r\n         * Sets the new brush size.\r\n         * @function widthChanged\r\n         * @param {number} width New brush size.\r\n         */\r\n        function widthChanged(width)\r\n        {\r\n            setDrawWidth(width);\r\n        }\r\n\r\n        /**\r\n         * Clears the canvas.\r\n         * @function clearCanvas\r\n         */\r\n        function clearCanvas()\r\n        {\r\n            context.clearRect(0, 0, canvasRef.current.width, canvasRef.current.height);\r\n        }\r\n\r\n        /**\r\n         * If this socket is an admin, send the data to the socket that requested it.\r\n         * @function turnDataRequested\r\n         * @param {string} socketId Which socket requested the data.\r\n         */\r\n        function turnDataRequested(socketId)\r\n        {\r\n            if(isAdmin())\r\n            {\r\n                let bufferT = context.getImageData(0, 0, 800, 300).data.buffer;\r\n                let bufferB = context.getImageData(0, 300, 800, 300).data.buffer;\r\n                let arrayT = new Uint8ClampedArray(bufferT);\r\n                let arrayB = new Uint8ClampedArray(bufferB);\r\n                let array = [arrayT, arrayB];\r\n                let data = {socketId: socketId, timeCounter: timeCounter.current, pictureData: array};\r\n                socket.emit('turnDataSent', data);\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Sets the time and image data recieved from the admin.\r\n         * @function turnDataRequested\r\n         * @param {Object} data Object containing the lobby time and image data.\r\n         */\r\n        function turnDataSent(data)\r\n        {\r\n            if(data.timeCounter != -1)\r\n                setTime(data.timeCounter - 1);\r\n            timeCounter.current = data.timeCounter - 1;\r\n\r\n            let arrayT = new Uint8ClampedArray(data.pictureData[0]);\r\n            let arrayB = new Uint8ClampedArray(data.pictureData[1]);\r\n            let imageT = new ImageData(arrayT, 800, 300);\r\n            let imageB = new ImageData(arrayB, 800, 300);\r\n            context.putImageData(imageT, 0, 0);\r\n            context.putImageData(imageB, 0, 300);\r\n        }\r\n\r\n        /**\r\n         * Sets the new turn data recieved and prepares for the next turn.\r\n         * @function newPlayerOnTurn\r\n         * @param {Object} data Object containing new turn data.\r\n         */\r\n        function newPlayerOnTurn(data)\r\n        {\r\n            let newLobby = JSON.parse(JSON.stringify(lobby));\r\n            newLobby.players.forEach(player =>\r\n            {\r\n                player.onTurn = false;\r\n                player.guessed = false;\r\n                player.pointsThisTurn = 0;\r\n            });\r\n            newLobby.players[data[0]].onTurn = true;\r\n            setLobby(newLobby);\r\n            \r\n            setWord(data[1]);\r\n\r\n            if(data[0] == lobby.players.findIndex(player => player.id === socket.id))\r\n            {\r\n                setOverlayContent(<p>YOU WILL BE DRAWING<br/>{data[1]}</p>);\r\n            }\r\n            else\r\n            {\r\n                setOverlayContent(<p>NEXT WILL BE DRAWING<br/>{lobby.players[data[0]].nickname}</p>);\r\n            }\r\n            \r\n            timeCounter.current = -1;\r\n            setTime(lobby.time);\r\n            if(data[0] == 0)\r\n                setRound(round + 1);\r\n            clearCanvas();\r\n        }\r\n\r\n        /**\r\n         * Hides the canvas overlay and sets the timer.\r\n         * @function startTurn\r\n         */\r\n        function startTurn()\r\n        {\r\n            setOverlayActive('');\r\n            timeCounter.current = lobby.time;\r\n        }\r\n\r\n        /**\r\n         * Shows the end turn overlay.\r\n         * @function endTurn\r\n         * @param {string} word This turn's word.\r\n         */\r\n        function endTurn(word)\r\n        {\r\n            setOverlayContent(\r\n                <div>\r\n                    <p>The word was <b>{word}</b></p>\r\n                    {lobby.players.map((player, index) => <p key={index}>{player.nickname}: {player.pointsThisTurn}</p>)}\r\n                </div>\r\n            );\r\n            setOverlayActive(' active');\r\n        }\r\n\r\n        /**\r\n         * Shows the end game overlay.\r\n         * @function endGame\r\n         */\r\n        function endGame()\r\n        {\r\n            setOverlayContent(\r\n                <div className='leaderboard'>\r\n                    <b>Game ended</b>\r\n                    <p className='first-place'>{lobby.players[0].nickname}: {lobby.players[0].points}</p>\r\n                    {lobby.players.length >= 2 && <p className='second-place'>{lobby.players[1].nickname}: {lobby.players[1].points}</p>}\r\n                    {lobby.players.length >= 3 && <p className='third-place'>{lobby.players[2].nickname}: {lobby.players[2].points}</p>}\r\n                </div>\r\n            );\r\n            setOverlayActive(' active');\r\n        }\r\n\r\n        function restartGame()\r\n        {\r\n            let newLobby = JSON.parse(JSON.stringify(lobby));\r\n            newLobby.players.forEach(player =>\r\n            {\r\n                player.points = 0;\r\n            });\r\n            setLobby(newLobby);\r\n            setAppView('lobby');\r\n        }\r\n\r\n        socket.on('startDrawing', startDrawing);\r\n        socket.on('draw', draw);\r\n        socket.on('colorChanged', colorChanged);\r\n        socket.on('widthChanged', widthChanged);\r\n        socket.on('clearCanvas', clearCanvas);\r\n        socket.on('turnDataRequested', turnDataRequested);\r\n        socket.on('turnDataSent', turnDataSent);\r\n        socket.on('newPlayerOnTurn', newPlayerOnTurn);\r\n        socket.on('startTurn', startTurn);\r\n        socket.on('endTurn', endTurn);\r\n        socket.on('endGame', endGame);\r\n        socket.on('restartGame', restartGame);\r\n\r\n        return () =>\r\n        {\r\n            socket.off('startDrawing', startDrawing);\r\n            socket.off('draw', draw);\r\n            socket.off('colorChanged', colorChanged);\r\n            socket.off('widthChanged', widthChanged);\r\n            socket.off('clearCanvas', clearCanvas);\r\n            socket.off('turnDataRequested', turnDataRequested);\r\n            socket.off('turnDataSent', turnDataSent);\r\n            socket.off('newPlayerOnTurn', newPlayerOnTurn);\r\n            socket.off('startTurn', startTurn);\r\n            socket.off('endTurn', endTurn);\r\n            socket.off('endGame', endGame);\r\n            socket.off('restartGame', restartGame);\r\n        }\r\n    }, [socket, lobby, setLobby, isAdmin, time, setTime, drawColor, drawMode, drawWidth]);\r\n\r\n    /**\r\n     * Handles when user pressed the mouse inside the canvas.\r\n     * @function onMouseDown\r\n     * @param {Event} e Mouse down event.\r\n     */\r\n    function onMouseDown(e)\r\n    {\r\n        if(e.buttons !== 1   || !isOnTurn())\r\n            return;\r\n\r\n        let pos = getMousePos(e);\r\n\r\n        if(drawMode === 'brush')\r\n        {\r\n            startDrawing(pos);\r\n            draw(pos);\r\n    \r\n            socket.emit('startDrawing', pos);\r\n            socket.emit('draw', pos);\r\n        }\r\n        else if(drawMode === 'line')\r\n        {\r\n            startDrawing(pos);\r\n    \r\n            socket.emit('startDrawing', pos);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Handles when user depressed the mouse inside the canvas.\r\n     * @function onMouseUp\r\n     * @param {Event} e Mouse up event.\r\n     */\r\n    function onMouseUp(e)\r\n    {\r\n        if(e.button !== 0 || !isOnTurn())\r\n            return;\r\n\r\n        let pos = getMousePos(e);\r\n\r\n        if(drawMode === 'line')\r\n        {\r\n            draw(pos);\r\n    \r\n            socket.emit('draw', pos);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Handles when user moves the mouse inside the canvas.\r\n     * @function onMouseMove\r\n     * @param {Event} e Mouse move event.\r\n     */\r\n    function onMouseMove(e)\r\n    {\r\n        if(e.buttons !== 1 || !isOnTurn())\r\n            return;\r\n\r\n        let pos = getMousePos(e);\r\n\r\n        if(drawMode === 'brush')\r\n        {\r\n            draw(pos);\r\n    \r\n            socket.emit('draw', pos);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets the x, y position of the mouse event.\r\n     * @function getMousePos\r\n     * @param {Event} e Mouse event.\r\n     * @returns {Object} Object containing the mouse event's x, y position.\r\n     */\r\n    function getMousePos(e)\r\n    {\r\n        let rect = canvasRef.current.getBoundingClientRect();\r\n        let borderLeft = getComputedStyle(canvasRef.current).borderLeftWidth;\r\n        let borderTop = getComputedStyle(canvasRef.current).borderTopWidth;\r\n\r\n        const x = e.clientX - rect.left - borderLeft.substring(0, borderLeft.length - 2);\r\n        const y = e.clientY - rect.top - borderTop.substring(0, borderTop.length - 2);\r\n        let pos = {x: x, y: y};\r\n\r\n        return pos;\r\n    }\r\n\r\n    /**\r\n     * Starts the drawing action at the desired position.\r\n     * @function startDrawing\r\n     * @param {Object} pos Object containing the x, y position.\r\n     */\r\n    function startDrawing(pos)\r\n    {\r\n        contextRef.current.beginPath();\r\n        contextRef.current.moveTo(pos.x, pos.y);\r\n    }\r\n\r\n    /**\r\n     * Draws line toward the desired position.\r\n     * @function draw\r\n     * @param {Object} pos Object containing the x, y position.\r\n     */\r\n    function draw(pos)\r\n    {\r\n        contextRef.current.lineTo(pos.x, pos.y);\r\n        contextRef.current.stroke();\r\n    }\r\n\r\n    return (\r\n        <div className='Game'>\r\n            <h1>Game</h1>\r\n            <div className='info'>\r\n                <div className='time'>\r\n                    <p>Time: {time}</p>\r\n                </div>\r\n                <div className='word'>\r\n                    <p>{word}</p>\r\n                </div>\r\n                <div className='rounds'>\r\n                    <p>Round: {round}/{lobby.rounds}</p>\r\n                </div>\r\n            </div>\r\n            <div className='players-game-chat'>\r\n                <div className='player-list'>\r\n                    {lobby.players.map((_player, index) => <Player key={index} lobby={lobby} index={index}/>)}\r\n                </div>\r\n                <div className='canvas'>\r\n                    <div className={'overlay' + overlayActive}>\r\n                        {overlayContent}\r\n                    </div>\r\n                    <canvas width='800' height='600' ref={canvasRef} onMouseDown={onMouseDown} onMouseUp={onMouseUp} onMouseMove={onMouseMove} />\r\n                </div>\r\n                <Chat socket={socket} lobby={lobby} setLobby={setLobby} />\r\n            </div>\r\n            <DrawingOptions socket={socket} isOnTurn={isOnTurn} canvasRef={canvasRef} contextRef={contextRef} drawColor={drawColor} setDrawColor={setDrawColor} setDrawMode={setDrawMode} setDrawWidth={setDrawWidth} />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Game;\r\n","/** @module App */\r\n\r\nimport { useState, useEffect } from 'react';\r\nimport io from 'socket.io-client';\r\nimport Home from '../Home/Home';\r\nimport Lobby from '../Lobby/Lobby';\r\nimport Game from '../Game/Game'\r\nimport './App.scss'\r\n\r\nfunction App() \r\n{\r\n    const [appView, setAppView] = useState('home'); //home, lobby, game\r\n    const [socket, setSocket] = useState();\r\n    const [lobby, setLobby] = useState();\r\n\r\n    useEffect(() => \r\n    {\r\n        const newSocket = io();\r\n        setSocket(newSocket);\r\n\r\n        return () => \r\n        {\r\n            newSocket.close();\r\n        }\r\n    }, [setSocket]);\r\n\r\n    useEffect(() =>\r\n    {\r\n        /**\r\n         * Adds the newly joined player to the lobby.\r\n         * @function playerJoined\r\n         * @param {Object} player Object containing the player's data.\r\n         */\r\n        function playerJoined(player)\r\n        {\r\n            let newLobby = JSON.parse(JSON.stringify(lobby));\r\n            newLobby.players.push(player);\r\n            setLobby(newLobby);\r\n        }\r\n\r\n        /**\r\n         * Removes the disconnected player from the lobby.\r\n         * @function playerDisconnected\r\n         * @param {string} id Id of the player, that disconnected.\r\n         */\r\n        function playerDisconnected(id)\r\n        {\r\n            let newLobby = JSON.parse(JSON.stringify(lobby));\r\n            let index = newLobby.players.findIndex(player => player.id === id);\r\n            newLobby.players.splice(index, 1);\r\n            setLobby(newLobby);\r\n        }\r\n\r\n        if(socket)\r\n        {\r\n            socket.on('playerJoined', playerJoined);\r\n            socket.on('playerDisconnected', playerDisconnected);\r\n        }\r\n\r\n        return () => \r\n        {\r\n            if(socket)\r\n            {\r\n                socket.off('playerJoined', playerJoined);\r\n                socket.off('playerDisconnected', playerDisconnected);\r\n            }\r\n        }\r\n    }, [socket, lobby, setLobby]);\r\n\r\n    /**\r\n     * Returns whether this socket is an admin.\r\n     * @function isAdmin\r\n     * @returns {boolean} Whether this socket is an admin.\r\n     */\r\n    function isAdmin()\r\n    {\r\n        return socket.id === lobby.players[0].id;\r\n    }\r\n\r\n    /**\r\n     * Returns whether this socket is on turn.\r\n     * @function isOnTurn\r\n     * @returns {boolean} Whether this socket is on turn.\r\n     */\r\n    function isOnTurn()\r\n    {\r\n        return lobby.players.find(p => socket.id === p.id).onTurn;\r\n    }\r\n\r\n    return (\r\n        <div className='App'>\r\n            {appView === 'home' && socket && <Home setAppView={setAppView} socket={socket} setLobby={setLobby} />}\r\n            {appView === 'lobby' && lobby && <Lobby setAppView={setAppView} socket={socket} lobby={lobby} setLobby={setLobby} isAdmin={isAdmin} />}\r\n            {appView === 'game' && <Game setAppView={setAppView} socket={socket} lobby={lobby} setLobby={setLobby} isAdmin={isAdmin} isOnTurn={isOnTurn} />}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './components/App/App';\r\n\r\nReactDOM.render\r\n(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);"],"sourceRoot":""}