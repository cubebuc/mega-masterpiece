{"version":3,"sources":["components/Home/Home.js","components/Lobby/LobbyOptions.js","components/Player.js","components/PlayerList.js","components/Lobby/Lobby.js","components/Game/Chat/Chat.js","components/Game/DrawingOptions/DrawingOptions.js","components/Game/Game.js","components/App/App.js","index.js"],"names":["Home","setAppView","socket","setLobby","useState","nickname","setNickname","useEffect","join","lobby","inGame","on","off","className","onSubmit","e","preventDefault","lobbyId","URLSearchParams","window","location","search","keys","next","value","data","emit","type","placeholder","onChange","target","required","LobbyOptions","isAdmin","setRounds","rounds","newLobby","JSON","parse","stringify","setTime","time","setWords","words","roundsChanged","timeChanged","wordsChanged","htmlFor","name","disabled","newRounds","defaultValue","newTime","newWords","split","Player","PlayerList","playerJoined","player","players","push","map","index","Lobby","protocol","host","id","onClick","Chat","messages","setMessages","messageSent","message","console","log","socketId","findIndex","guessed","sender","onKeyDown","key","find","p","sendMessage","DrawingOptions","isOnTurn","canvasRef","contextRef","drawColor","setDrawColor","setDrawMode","setDrawWidth","style","backgroundColor","color","onColorChange","defaultChecked","width","onWidthChange","current","clearRect","height","Game","overlayContent","setOverlayContent","overlayActive","setOverlayActive","word","setWord","round","setRound","drawMode","drawWidth","useRef","timeCounter","getMousePos","rect","getBoundingClientRect","borderLeft","getComputedStyle","borderLeftWidth","borderTop","borderTopWidth","x","clientX","left","substring","length","y","clientY","top","startDrawing","pos","beginPath","moveTo","draw","lineTo","stroke","setInterval","context","getContext","colorChanged","widthChanged","clearCanvas","pictureDataRequested","bufferT","getImageData","buffer","bufferB","pictureData","Uint8ClampedArray","pictureDataSent","arrayT","arrayB","imageT","ImageData","imageB","putImageData","thisPlayerOnTurn","startTurn","onTurn","currentWord","otherPlayerOnTurn","forEach","setTimeout","lineCap","lineJoin","strokeStyle","lineWidth","ref","onMouseDown","buttons","onMouseUp","button","onMouseMove","App","appView","setSocket","newSocket","io","close","playerDisconnecting","splice","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.04e9eed4.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport './Home.scss'\r\n\r\nfunction Home({setAppView, socket, setLobby}) \r\n{\r\n    const [nickname, setNickname] = useState('');\r\n\r\n    useEffect(() => \r\n    {\r\n        function join(lobby)\r\n        {\r\n            setLobby(lobby);\r\n            if(lobby.inGame)\r\n                setAppView('game');\r\n            else\r\n                setAppView('lobby');\r\n        }\r\n\r\n        socket.on('join', join);\r\n\r\n        return () => socket.off('join', join);\r\n    }, [setAppView, socket, setLobby]);\r\n    \r\n    function onSubmit(e)\r\n    {\r\n        e.preventDefault();\r\n\r\n        const searchParams = new URLSearchParams(window.location.search);\r\n        const lobbyId = searchParams.keys().next().value;\r\n\r\n        let data = {nickname: nickname, lobbyId: lobbyId}\r\n        socket.emit('join', data);\r\n    }\r\n\r\n    return (\r\n        <div className='Home'>\r\n            <h1>Home</h1>\r\n            <form onSubmit={onSubmit}>\r\n                <input type='text' placeholder='Nickname' value={nickname} onChange={e => setNickname(e.target.value)} required />\r\n                <button>Join Lobby</button>\r\n            </form>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Home;\r\n","import React, { useState, useEffect } from 'react';\r\n\r\nfunction LobbyOptions({socket, lobby, setLobby, isAdmin}) \r\n{    \r\n    useEffect(() => \r\n    {\r\n        function roundsChanged(rounds)\r\n        {\r\n            setRounds(rounds);\r\n        }\r\n\r\n        function timeChanged(time)\r\n        {\r\n            setTime(time);\r\n        }\r\n\r\n        function wordsChanged(words)\r\n        {\r\n            setWords(words);\r\n        }\r\n\r\n        socket.on('roundsChanged', roundsChanged);\r\n        socket.on('timeChanged', timeChanged);\r\n        socket.on('wordsChanged', wordsChanged);\r\n\r\n        return () =>\r\n        {\r\n            socket.off('roundsChanged', roundsChanged);\r\n            socket.off('timeChanged', timeChanged);\r\n            socket.off('wordsChanged', wordsChanged);\r\n        }\r\n    }, [socket, lobby]);\r\n\r\n    function onRoundsSelectChange(e)\r\n    {\r\n        if(isAdmin())\r\n        {\r\n            let newRounds = e.target.value;\r\n            setRounds(newRounds);\r\n\r\n            socket.emit('roundsChanged', newRounds);\r\n        }\r\n    }\r\n\r\n    function onTimeSelectChange(e)\r\n    {\r\n        if(isAdmin())\r\n        {\r\n            let newTime = e.target.value;\r\n            setTime(newTime);\r\n\r\n            socket.emit('timeChanged', newTime);\r\n        }\r\n    }\r\n\r\n    function onWordsTextAreaChange(e)\r\n    {\r\n        if(isAdmin())\r\n        {\r\n            let newWords = (e.target.value).split(',');\r\n            setWords(newWords);\r\n\r\n            socket.emit('wordsChanged', newWords);\r\n        }\r\n    }\r\n\r\n    function setRounds(rounds)\r\n    {\r\n        let newLobby = JSON.parse(JSON.stringify(lobby));\r\n        newLobby.rounds = rounds;\r\n        setLobby(newLobby);\r\n    }\r\n\r\n    function setTime(time)\r\n    {\r\n        let newLobby = JSON.parse(JSON.stringify(lobby));\r\n        newLobby.time = time;\r\n        setLobby(newLobby);\r\n    }\r\n\r\n    function setWords(words)\r\n    {\r\n        let newLobby = JSON.parse(JSON.stringify(lobby));\r\n        newLobby.words = words;\r\n        setLobby(newLobby);\r\n    }\r\n\r\n    return (\r\n        <div className=\"LobbyOptions\">\r\n            <label htmlFor=\"rounds\">Rounds</label>\r\n            <select className=\"rounds\" name=\"rounds\" disabled={!isAdmin()} value={lobby.rounds} onChange={onRoundsSelectChange}>\r\n                <option value=\"1\">1</option>\r\n                <option value=\"2\">2</option>\r\n                <option value=\"3\">3</option>\r\n                <option value=\"4\">4</option>\r\n                <option value=\"5\" defaultValue>5</option>\r\n                <option value=\"6\">6</option>\r\n                <option value=\"7\">7</option>\r\n                <option value=\"8\">8</option>\r\n                <option value=\"9\">9</option>\r\n                <option value=\"10\">10</option>\r\n            </select>\r\n            <label htmlFor=\"time\">Drawing time (seconds)</label>\r\n            <select className=\"time\" name=\"time\" disabled={!isAdmin()} value={lobby.time} onChange={onTimeSelectChange}>\r\n                <option value=\"10\">10</option>\r\n                <option value=\"20\">20</option>\r\n                <option value=\"30\">30</option>\r\n                <option value=\"40\">40</option>\r\n                <option value=\"50\">50</option>\r\n                <option value=\"60\">60</option>\r\n                <option value=\"70\">70</option>\r\n                <option value=\"80\">80</option>\r\n                <option value=\"90\" defaultValue>90</option>\r\n                <option value=\"100\">100</option>\r\n                <option value=\"110\">110</option>\r\n                <option value=\"120\">120</option>\r\n                <option value=\"130\">130</option>\r\n                <option value=\"140\">140</option>\r\n                <option value=\"150\">150</option>\r\n                <option value=\"160\">160</option>\r\n                <option value=\"170\">170</option>\r\n                <option value=\"180\">180</option>\r\n            </select>\r\n            <label htmlFor=\"words\">Words</label>\r\n            <textarea className=\"words\" value={lobby.words.join(',')} onChange={onWordsTextAreaChange} disabled={!isAdmin()}></textarea>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default LobbyOptions;\r\n","import React from 'react';\r\n\r\nfunction Player({nickname}) \r\n{\r\n    return (\r\n        <div>\r\n            <p>{nickname}</p>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Player;\r\n","import React, { useEffect } from 'react';\r\nimport Player from './Player'\r\n\r\nfunction PlayerList({socket, lobby, setLobby}) \r\n{\r\n    useEffect(() => \r\n    {\r\n        function playerJoined(player)\r\n        {\r\n            let newLobby = JSON.parse(JSON.stringify(lobby));\r\n            newLobby.players.push(player);\r\n            setLobby(newLobby);\r\n        }\r\n\r\n        socket.on('playerJoined', playerJoined);\r\n\r\n        return () =>\r\n        {\r\n            socket.off('playerJoined', playerJoined);\r\n        }\r\n    }, [socket, lobby, setLobby]);\r\n\r\n    return (\r\n        <div className='PlayerList'>\r\n            {lobby.players.map((player, index) => <Player key={index} nickname={player.nickname}/>)}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default PlayerList;\r\n","import React, { useEffect } from 'react';\r\nimport LobbyOptions from './LobbyOptions';\r\nimport PlayerList from '../PlayerList';\r\nimport './Lobby.scss'\r\n\r\nfunction Lobby({setAppView, socket, lobby, setLobby, isAdmin}) \r\n{\r\n    useEffect(() => \r\n    {\r\n        function joinGame()\r\n        {\r\n            setAppView('game');\r\n            socket.emit('ready');\r\n        }\r\n\r\n        socket.on('joinGame', joinGame);\r\n\r\n        return () => socket.off('joinGame');\r\n    }, [socket, setAppView])\r\n\r\n    function onClick()\r\n    {\r\n        socket.emit('joinGame');\r\n        setAppView('game');\r\n        socket.emit('ready');\r\n    }\r\n\r\n    return (\r\n        <div className='Lobby'>\r\n            <h1>Lobby</h1>\r\n            <strong>{window.location.protocol}//{window.location.host}/?{lobby.id}</strong>\r\n            <div className='options-players'>\r\n                <LobbyOptions socket={socket} lobby={lobby} setLobby={setLobby} isAdmin={isAdmin} />\r\n                <div className='players'>\r\n                    <label htmlFor='player-list'>Players</label>\r\n                    <PlayerList id='player-list' socket={socket} lobby={lobby} setLobby={setLobby} />\r\n                </div>\r\n            </div>\r\n            <button onClick={onClick} disabled={!isAdmin()}>Start</button>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Lobby;\r\n","import React, { useEffect, useState } from 'react'\r\nimport './Chat.scss'\r\n\r\nfunction Chat({socket, lobby, setLobby}) \r\n{\r\n    const [messages, setMessages] = useState([]);\r\n\r\n    useEffect(() =>\r\n    {\r\n        function messageSent(message)\r\n        {\r\n            console.log(message);\r\n            setMessages([...messages, message]);\r\n        }\r\n\r\n        function playerGuessed(socketId)\r\n        {\r\n            let newLobby = JSON.parse(JSON.stringify(lobby));\r\n            let index = newLobby.players.findIndex(player => player.id === socketId);\r\n            newLobby.players[index].guessed = true;\r\n            setLobby(newLobby);\r\n            setMessages([...messages, {sender: 'Player ' + lobby.players[index].nickname, value: 'guessed the word!'}]);\r\n        }\r\n\r\n        socket.on('messageSent', messageSent);\r\n        socket.on('playerGuessed', playerGuessed);\r\n\r\n        return () =>\r\n        {\r\n            socket.off('messageSent', messageSent);\r\n        }\r\n    }, [socket, lobby, messages]);\r\n\r\n    function onKeyDown(e)\r\n    {\r\n        if(e.key === 'Enter')\r\n        {\r\n            let message = {sender: lobby.players.find(p => p.id === socket.id).nickname, value: e.target.value};\r\n            e.target.value = '';\r\n            setMessages([...messages, message]);\r\n            sendMessage(message);\r\n        }\r\n    }\r\n\r\n    function sendMessage(message)\r\n    {\r\n        console.log(message);\r\n        socket.emit('messageSent', message);\r\n    }\r\n\r\n    return (\r\n        <div className='Chat'>\r\n            <div className='messages'>\r\n                {messages.map((message, index) => <p className='message' key={index}>{message.sender}: {message.value}</p>)}\r\n            </div>\r\n            <input type='text' onKeyDown={onKeyDown}/>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Chat\r\n","import React from 'react';\r\nimport './DrawingOptions.scss'\r\n\r\nfunction DrawingOptions({socket, isOnTurn, canvasRef, contextRef, drawColor, setDrawColor, setDrawMode, setDrawWidth}) \r\n{\r\n    const colors = ['#ffffff', \r\n                    '#000000', \r\n                    '#b9b9b9', \r\n                    '#7d8180', \r\n                    '#e0222c', \r\n                    '#92000d', \r\n                    '#f98a21', \r\n                    '#f4620b', \r\n                    '#ffd011', \r\n                    '#f5bb00', \r\n                    '#63ba2d', \r\n                    '#267637', \r\n                    '#78cdf2', \r\n                    '#009ada', \r\n                    '#0060b4', \r\n                    '#022c78', \r\n                    '#8b159f', \r\n                    '#5b1577', \r\n                    '#df177a', \r\n                    '#ab1b7a', \r\n                    '#ba5901', \r\n                    '#763100',];\r\n\r\n        const widths = [3, 10, 25, 40];\r\n\r\n    function onColorChange(color)\r\n    {\r\n        if(isOnTurn())\r\n        {\r\n            setDrawColor(color);\r\n            socket.emit('colorChanged', color);\r\n        }\r\n    }\r\n\r\n    function onModeChange(e)\r\n    {\r\n        if(isOnTurn())\r\n        {\r\n            setDrawMode(e.target.value);\r\n        }\r\n    }\r\n\r\n    function onWidthChange(width)\r\n    {\r\n        if(isOnTurn())\r\n        {\r\n            setDrawWidth(width);\r\n            socket.emit('widthChanged', width);\r\n        }\r\n    }\r\n\r\n    function onClearCanvas()\r\n    {\r\n        if(isOnTurn())\r\n        {\r\n            contextRef.current.clearRect(0, 0, canvasRef.current.width, canvasRef.current.height);\r\n            socket.emit('clearCanvas');\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className='DrawingOptions'>\r\n                <div className='current-color' style={{backgroundColor: isOnTurn() ? drawColor : '#000000'}} />\r\n                <div className='colors'>\r\n                    {colors.map((color, index) => <button key={index} style={{backgroundColor: color}} onClick={() => onColorChange(color)} disabled={!isOnTurn()} />)}\r\n                </div>\r\n                <div className='drawing-modes' onChange={onModeChange}>\r\n                    <input type=\"radio\" name='mode' value={'brush'} className='brush' defaultChecked disabled={!isOnTurn()} />\r\n                    <input type=\"radio\" name='mode' value={'line'} className='line' disabled={!isOnTurn()} />\r\n                </div>\r\n                <div className='brush-size'>\r\n                    {widths.map((width, index) => <button key={index} onClick={() => onWidthChange(width)} disabled={!isOnTurn()} />)}\r\n                </div>\r\n                <div className='clear-canvas'>\r\n                    <button onClick={() => onClearCanvas()} disabled={!isOnTurn()} />\r\n                </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default DrawingOptions;\r\n","import React, { useEffect, useRef, useState } from 'react';\r\nimport PlayerList from '../PlayerList';\r\nimport Chat from './Chat/Chat';\r\nimport DrawingOptions from './DrawingOptions/DrawingOptions';\r\nimport './Game.scss'\r\n\r\nfunction Game({socket, lobby, setLobby, isAdmin, isOnTurn}) \r\n{\r\n    const [overlayContent, setOverlayContent] = useState('');\r\n    const [overlayActive, setOverlayActive] = useState('');\r\n    const [time, setTime] = useState(lobby.time);\r\n    const [word, setWord] = useState('');\r\n    const [round, setRound] = useState(0);\r\n\r\n    const [drawColor, setDrawColor] = useState('#000000');\r\n    const [drawMode, setDrawMode] = useState('brush');\r\n    const [drawWidth, setDrawWidth] = useState(15);\r\n\r\n    const canvasRef = useRef(null);\r\n    const contextRef = useRef(null);\r\n\r\n    const timeCounter = useRef(-1);\r\n\r\n    useEffect(() =>\r\n    {\r\n        setInterval(() => {\r\n            if(timeCounter.current >= 0)\r\n            {\r\n                setTime(timeCounter.current);\r\n                timeCounter.current--;\r\n            }\r\n        }, 1000);\r\n    }, []);\r\n\r\n    useEffect(() =>\r\n    {\r\n        const context = canvasRef.current.getContext('2d');\r\n        context.lineCap = 'round';\r\n        context.lineJoin = 'round';\r\n        context.strokeStyle = drawColor;\r\n        context.lineWidth = drawWidth;\r\n        context.beginPath();\r\n        contextRef.current = context;\r\n\r\n        function colorChanged(color)\r\n        {\r\n            setDrawColor(color);\r\n        }\r\n\r\n        function widthChanged(width)\r\n        {\r\n            setDrawWidth(width);\r\n        }\r\n\r\n        function clearCanvas()\r\n        {\r\n            context.clearRect(0, 0, canvasRef.current.width, canvasRef.current.height);\r\n        }\r\n\r\n        function pictureDataRequested(socketId)\r\n        {\r\n            if(isAdmin())\r\n            {\r\n                let bufferT = context.getImageData(0, 0, 800, 300).data.buffer;\r\n                let bufferB = context.getImageData(0, 300, 800, 300).data.buffer;\r\n                let arrayT = new Uint8ClampedArray(bufferT);\r\n                let arrayB = new Uint8ClampedArray(bufferB);\r\n                let array = [arrayT, arrayB];\r\n                let data = {socketId: socketId, pictureData: array};\r\n                socket.emit('pictureDataSent', data);\r\n            }\r\n        }\r\n\r\n        function pictureDataSent(data)\r\n        {\r\n            let arrayT = new Uint8ClampedArray(data[0]);\r\n            let arrayB = new Uint8ClampedArray(data[1]);\r\n            let imageT = new ImageData(arrayT, 800, 300);\r\n            let imageB = new ImageData(arrayB, 800, 300);\r\n            context.putImageData(imageT, 0, 0);\r\n            context.putImageData(imageB, 0, 300);\r\n        }\r\n\r\n        function thisPlayerOnTurn(word)\r\n        {\r\n            startTurn();\r\n            lobby.players.find(p => p.id === socket.id).onTurn = true;\r\n            lobby.currentWord = word;\r\n\r\n            setWord(word);\r\n            setOverlayContent(<p>YOU WILL BE DRAWING<br/>{word}</p>);\r\n        }\r\n\r\n        function otherPlayerOnTurn(data)\r\n        {\r\n            startTurn();\r\n            lobby.players[data[0]].onTurn = true;\r\n\r\n            setWord(data[1]);\r\n            setOverlayContent(<p>NEXT WILL BE DRAWING<br/>{lobby.players[data[0]].nickname}</p>);\r\n        }\r\n\r\n        function startTurn()\r\n        {\r\n            lobby.players.forEach(player => player.onTurn = false);\r\n            lobby.players.forEach(player => player.guessed = false);\r\n\r\n            timeCounter.current = -1;\r\n            setTime(lobby.time);\r\n            setRound(round + 1);\r\n            setOverlayActive(' active');\r\n            clearCanvas();\r\n\r\n            setTimeout(() => {\r\n                setOverlayActive('');\r\n                timeCounter.current = lobby.time;\r\n            }, 2000);\r\n        }\r\n\r\n        socket.emit('pictureDataRequested', socket.id);\r\n\r\n        socket.on('startDrawing', startDrawing);\r\n        socket.on('draw', draw);\r\n        socket.on('colorChanged', colorChanged);\r\n        socket.on('widthChanged', widthChanged);\r\n        socket.on('clearCanvas', clearCanvas);\r\n        socket.on('pictureDataRequested', pictureDataRequested);\r\n        socket.on('pictureDataSent', pictureDataSent);\r\n        socket.on('thisPlayerOnTurn', thisPlayerOnTurn);\r\n        socket.on('otherPlayerOnTurn', otherPlayerOnTurn);\r\n\r\n        return () =>\r\n        {\r\n            socket.off('startDrawing', startDrawing);\r\n            socket.off('draw', draw);\r\n            socket.off('colorChanged', colorChanged);\r\n            socket.off('widthChanged', widthChanged);\r\n            socket.off('clearCanvas', clearCanvas);\r\n            socket.off('pictureDataRequested', pictureDataRequested);\r\n            socket.off('pictureDataSent', pictureDataSent);\r\n            socket.off('thisPlayerOnTurn', thisPlayerOnTurn);\r\n            socket.off('otherPlayerOnTurn', otherPlayerOnTurn);\r\n        }\r\n    }, [socket, lobby, isAdmin, time, setTime, drawColor, drawMode, drawWidth]);\r\n\r\n    function onMouseDown(e)\r\n    {\r\n        if(e.buttons !== 1   || !isOnTurn())\r\n            return;\r\n\r\n        let pos = getMousePos(e);\r\n\r\n        if(drawMode === 'brush')\r\n        {\r\n            startDrawing(pos);\r\n            draw(pos);\r\n    \r\n            socket.emit('startDrawing', pos);\r\n            socket.emit('draw', pos);\r\n        }\r\n        else if(drawMode === 'line')\r\n        {\r\n            startDrawing(pos);\r\n    \r\n            socket.emit('startDrawing', pos);\r\n        }\r\n    }\r\n\r\n    function onMouseUp(e)\r\n    {\r\n        if(e.button !== 0 || !isOnTurn())\r\n            return;\r\n\r\n        let pos = getMousePos(e);\r\n\r\n        if(drawMode === 'line')\r\n        {\r\n            draw(pos);\r\n    \r\n            socket.emit('draw', pos);\r\n        }\r\n    }\r\n\r\n    function onMouseMove(e)\r\n    {\r\n        if(e.buttons !== 1 || !isOnTurn())\r\n            return;\r\n\r\n        let pos = getMousePos(e);\r\n\r\n        if(drawMode === 'brush')\r\n        {\r\n            draw(pos);\r\n    \r\n            socket.emit('draw', pos);\r\n        }\r\n    }\r\n\r\n    function getMousePos(e)\r\n    {\r\n        let rect = canvasRef.current.getBoundingClientRect();\r\n        let borderLeft = getComputedStyle(canvasRef.current).borderLeftWidth;\r\n        let borderTop = getComputedStyle(canvasRef.current).borderTopWidth;\r\n\r\n        const x = e.clientX - rect.left - borderLeft.substring(0, borderLeft.length - 2);\r\n        const y = e.clientY - rect.top - borderTop.substring(0, borderTop.length - 2);\r\n        let pos = {x: x, y: y};\r\n\r\n        return pos;\r\n    }\r\n\r\n    function startDrawing(pos)\r\n    {\r\n        contextRef.current.beginPath();\r\n        contextRef.current.moveTo(pos.x, pos.y);\r\n    }\r\n\r\n    function draw(pos)\r\n    {\r\n        contextRef.current.lineTo(pos.x, pos.y);\r\n        contextRef.current.stroke();\r\n    }\r\n\r\n    return (\r\n        <div className='Game'>\r\n            <h1>Game</h1>\r\n            <div className='info'>\r\n                <div className='time'>\r\n                    <p>Time: {time}</p>\r\n                </div>\r\n                <div className='word'>\r\n                    <p>{word}</p>\r\n                </div>\r\n                <div className='rounds'>\r\n                    <p>Round: {round}/{lobby.rounds}</p>\r\n                </div>\r\n            </div>\r\n            <div className='players-game-chat'>\r\n                <PlayerList socket={socket} lobby={lobby} setLobby={setLobby} />\r\n                <div className='canvas'>\r\n                    <div className={'overlay' + overlayActive}>\r\n                        {overlayContent}\r\n                    </div>\r\n                    <canvas width='800' height='600' ref={canvasRef} onMouseDown={onMouseDown} onMouseUp={onMouseUp} onMouseMove={onMouseMove} />\r\n                </div>\r\n                <Chat socket={socket} lobby={lobby} setLobby={setLobby} />\r\n            </div>\r\n            <DrawingOptions socket={socket} isOnTurn={isOnTurn} canvasRef={canvasRef} contextRef={contextRef} drawColor={drawColor} setDrawColor={setDrawColor} setDrawMode={setDrawMode} setDrawWidth={setDrawWidth} />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Game;\r\n","import { useState, useEffect } from 'react';\r\nimport io from 'socket.io-client';\r\nimport Home from '../Home/Home';\r\nimport Lobby from '../Lobby/Lobby';\r\nimport Game from '../Game/Game'\r\nimport './App.scss'\r\n\r\nfunction App() \r\n{\r\n  const [appView, setAppView] = useState('home'); //home, lobby, game\r\n  const [socket, setSocket] = useState();\r\n  const [lobby, setLobby] = useState();\r\n\r\n  useEffect(() => \r\n  {\r\n    const newSocket = io('http://localhost:5000');\r\n    setSocket(newSocket);\r\n\r\n    return () => \r\n    {\r\n      newSocket.close();\r\n    }\r\n  }, [setSocket]);\r\n\r\n  useEffect(() =>\r\n  {\r\n    function playerDisconnecting(id)\r\n    {\r\n      let newLobby = JSON.parse(JSON.stringify(lobby));\r\n      let index = newLobby.players.findIndex(player => player.id === id);\r\n      newLobby.players.splice(index, 1);\r\n      setLobby(newLobby);\r\n    }\r\n\r\n    if(socket)\r\n      socket.on('playerDisconnecting', playerDisconnecting);\r\n\r\n    return () => \r\n    {\r\n      if(socket)\r\n        socket.off('playerDisconnecting', playerDisconnecting);\r\n    }\r\n  }, [socket, lobby]);\r\n\r\n  function isAdmin()\r\n  {\r\n    return socket.id === lobby.players[0].id;\r\n  }\r\n\r\n  function isOnTurn()\r\n  {\r\n    return lobby.players.find(p => socket.id === p.id).onTurn;\r\n  }\r\n\r\n  return (\r\n    <div className='App'>\r\n      {appView === 'home' && socket && <Home setAppView={setAppView} socket={socket} setLobby={setLobby} />}\r\n      {appView === 'lobby' && lobby && <Lobby setAppView={setAppView} socket={socket} lobby={lobby} setLobby={setLobby} isAdmin={isAdmin} />}\r\n      {appView === 'game' && <Game socket={socket} lobby={lobby} setLobby={setLobby} isAdmin={isAdmin} isOnTurn={isOnTurn} />}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './components/App/App';\r\n\r\nReactDOM.render\r\n(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);"],"sourceRoot":""}