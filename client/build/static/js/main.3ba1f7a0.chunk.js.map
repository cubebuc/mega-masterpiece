{"version":3,"sources":["components/Home/Home.js","components/Lobby/LobbyOptions.js","components/Lobby/Lobby.js","components/Game/Player.js","components/Game/Chat/Chat.js","components/Game/DrawingOptions/DrawingOptions.js","components/Game/Game.js","components/App/App.js","index.js"],"names":["Home","setAppView","socket","setLobby","useState","nickname","setNickname","buttonDisabled","setButtonDisabled","useEffect","join","lobby","parsedLobby","JSON","parse","inGame","url","URL","window","location","searchParams","set","id","history","replaceState","on","off","className","onSubmit","e","preventDefault","lobbyId","URLSearchParams","search","get","data","emit","type","placeholder","value","onChange","target","maxLength","required","disabled","LobbyOptions","isAdmin","setRounds","rounds","newLobby","stringify","setTime","time","setWords","words","roundsChanged","timeChanged","wordsChanged","htmlFor","name","newRounds","defaultValue","newTime","newWords","split","Lobby","protocol","host","players","map","player","index","onClick","Player","setPlayer","style","backgroundColor","onTurn","guessed","points","Chat","messages","setMessages","messageSent","message","playerGuessed","findIndex","pointsThisTurn","raw","playerNearGuess","word","onKeyDown","key","find","p","sendMessage","DrawingOptions","isOnTurn","canvasRef","contextRef","drawColor","setDrawColor","setDrawMode","setDrawWidth","color","onColorChange","defaultChecked","src","alt","width","toString","current","clearRect","height","Game","overlayContent","setOverlayContent","overlayActive","setOverlayActive","setWord","round","setRound","drawMode","drawWidth","useRef","timeCounter","getMousePos","rect","getBoundingClientRect","borderLeft","getComputedStyle","borderLeftWidth","borderTop","borderTopWidth","x","clientX","left","substring","length","y","clientY","top","startDrawing","pos","beginPath","moveTo","draw","lineTo","stroke","setInterval","context","getContext","colorChanged","widthChanged","clearCanvas","turnDataRequested","socketId","bufferT","getImageData","buffer","bufferB","array","Uint8ClampedArray","pictureData","turnDataSent","arrayT","arrayB","imageT","ImageData","imageB","putImageData","newPlayerOnTurn","forEach","startTurn","endTurn","sortedPlayers","slice","sort","p1","p2","endGame","restartGame","lineCap","lineJoin","strokeStyle","lineWidth","_player","ref","onMouseDown","buttons","onMouseUp","button","onMouseMove","App","appView","setSocket","newSocket","io","close","playerJoined","push","playerDisconnected","splice","href","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3ba1f7a0.chunk.js","sourcesContent":["/** @module Home */\r\n\r\nimport React, { useEffect, useState } from 'react';\r\nimport './Home.scss'\r\n\r\nfunction Home({setAppView, socket, setLobby}) \r\n{\r\n    const [nickname, setNickname] = useState('');\r\n    const [buttonDisabled, setButtonDisabled] = useState(false);\r\n    \r\n    useEffect(() => \r\n    {\r\n        /**\r\n         * Sets the lobby recieved from the server and switches the view.\r\n         * @function join\r\n         * @param {Object} lobby Lobby object.\r\n         */\r\n        function join(lobby)\r\n        {\r\n            let parsedLobby = JSON.parse(lobby);\r\n            setLobby(parsedLobby);\r\n            if(parsedLobby.inGame)\r\n            {\r\n                setAppView('game');\r\n            }\r\n            else\r\n            {\r\n                const url = new URL(window.location);\r\n                url.searchParams.set('id', parsedLobby.id);\r\n                window.history.replaceState({}, '', url);\r\n                setAppView('lobby');\r\n            }    \r\n        }\r\n\r\n        socket.on('join', join);\r\n\r\n        return () => socket.off('join', join);\r\n    }, [setAppView, socket, setLobby]);\r\n    \r\n    /**\r\n     * Sends join request to the server.\r\n     * @function onSubmit\r\n     * @param {Event} e Form submit event.\r\n     */\r\n    function onSubmit(e)\r\n    {\r\n        setButtonDisabled(true);\r\n        e.preventDefault();\r\n\r\n        const searchParams = new URLSearchParams(window.location.search);\r\n        const lobbyId = searchParams.get('id');\r\n\r\n        let data = {nickname: nickname, lobbyId: lobbyId}\r\n        socket.emit('join', data);\r\n    }\r\n\r\n    return (\r\n        <div className='Home'>\r\n            <h1>Home</h1>\r\n            <form onSubmit={onSubmit}>\r\n                <input type='text' placeholder='Nickname' value={nickname} onChange={e => setNickname(e.target.value)} maxLength={16} required />\r\n                <button disabled={buttonDisabled}>Join Lobby</button>\r\n            </form>\r\n            <div>\r\n                <h2>How to play</h2>\r\n                <ul>\r\n                    <li><p>Join a friend's lobby by using his URL or create a new one by simply entering a name and joining.</p></li>\r\n                    <li><p>As a lobby admin you can set the game options, others wait until you start the game.</p></li>\r\n                    <li><p>If you are drawing, try your best to express the word with your Picasso skills.</p></li>\r\n                    <li><p>If you are guessing, try to guess the word by typing in the chat.<br/>You can see the number of the letters shown by underscores above the drawing.</p></li>\r\n                </ul>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Home;\r\n","/** @module LobbyOptions */\r\n\r\nimport React, { useEffect } from 'react';\r\n\r\nfunction LobbyOptions({socket, lobby, setLobby, isAdmin}) \r\n{    \r\n    useEffect(() => \r\n    {\r\n        /**\r\n         * Sets the new round count.\r\n         * @function roundsChanged\r\n         * @param {number} rounds Number of rounds for the game.\r\n         */\r\n        function roundsChanged(rounds)\r\n        {\r\n            setRounds(rounds);\r\n        }\r\n\r\n        /**\r\n         * Sets the new time in a turn.\r\n         * @function timeChanged\r\n         * @param {number} time Amount of time in a turn.\r\n         */\r\n        function timeChanged(time)\r\n        {\r\n            setTime(time);\r\n        }\r\n\r\n        /**\r\n         * Sets the new word array.\r\n         * @function wordsChanged\r\n         * @param {string[]} words Array of the words for the game.\r\n         */\r\n        function wordsChanged(words)\r\n        {\r\n            setWords(words);\r\n        }\r\n\r\n        socket.on('roundsChanged', roundsChanged);\r\n        socket.on('timeChanged', timeChanged);\r\n        socket.on('wordsChanged', wordsChanged);\r\n\r\n        return () =>\r\n        {\r\n            socket.off('roundsChanged', roundsChanged);\r\n            socket.off('timeChanged', timeChanged);\r\n            socket.off('wordsChanged', wordsChanged);\r\n        }\r\n    }, [socket, lobby]);\r\n\r\n    /**\r\n     * Transmits the round count change if this socket is an admin.\r\n     * @function onRoundsSelectChange\r\n     * @param {Event} e Select change event.\r\n     */\r\n    function onRoundsSelectChange(e)\r\n    {\r\n        if(isAdmin())\r\n        {\r\n            let newRounds = e.target.value;\r\n            setRounds(newRounds);\r\n\r\n            socket.emit('roundsChanged', newRounds);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Transmits the time amount change if this socket is an admin.\r\n     * @function onTimeSelectChange\r\n     * @param {Event} e Select change event.\r\n     */\r\n    function onTimeSelectChange(e)\r\n    {\r\n        if(isAdmin())\r\n        {\r\n            let newTime = e.target.value;\r\n            setTime(newTime);\r\n\r\n            socket.emit('timeChanged', newTime);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Transmits the word array change if this socket is and admin.\r\n     * @function onWordsTextAreaChange\r\n     * @param {Event} e Text area change event.\r\n     */\r\n    function onWordsTextAreaChange(e)\r\n    {\r\n        if(isAdmin())\r\n        {\r\n            let newWords = (e.target.value).split(',');\r\n            setWords(newWords);\r\n\r\n            socket.emit('wordsChanged', newWords);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sets the rounds for the game.\r\n     * @function setRounds\r\n     * @param {number} rounds Number of rounds for the game.\r\n     */\r\n    function setRounds(rounds)\r\n    {\r\n        let newLobby = JSON.parse(JSON.stringify(lobby));\r\n        newLobby.rounds = rounds;\r\n        setLobby(newLobby);\r\n    }\r\n\r\n    /**\r\n     * Sets the time in a round.\r\n     * @function setTime\r\n     * @param {number} time Amount of time in a turn.\r\n     */\r\n    function setTime(time)\r\n    {\r\n        let newLobby = JSON.parse(JSON.stringify(lobby));\r\n        newLobby.time = time;\r\n        setLobby(newLobby);\r\n    }\r\n\r\n    /**\r\n     * Sets the word array for the game.\r\n     * @function setWords\r\n     * @param {string[]} words Word array.\r\n     */\r\n    function setWords(words)\r\n    {\r\n        let newLobby = JSON.parse(JSON.stringify(lobby));\r\n        newLobby.words = words;\r\n        setLobby(newLobby);\r\n    }\r\n\r\n    return (\r\n        <div className=\"LobbyOptions\">\r\n            <label htmlFor=\"rounds\">Rounds</label>\r\n            <select className=\"rounds\" name=\"rounds\" disabled={!isAdmin()} value={lobby.rounds} onChange={onRoundsSelectChange}>\r\n                <option value=\"1\">1</option>\r\n                <option value=\"2\">2</option>\r\n                <option value=\"3\">3</option>\r\n                <option value=\"4\">4</option>\r\n                <option value=\"5\" defaultValue>5</option>\r\n                <option value=\"6\">6</option>\r\n                <option value=\"7\">7</option>\r\n                <option value=\"8\">8</option>\r\n                <option value=\"9\">9</option>\r\n                <option value=\"10\">10</option>\r\n            </select>\r\n            <label htmlFor=\"time\">Drawing time (seconds)</label>\r\n            <select className=\"time\" name=\"time\" disabled={!isAdmin()} value={lobby.time} onChange={onTimeSelectChange}>\r\n                <option value=\"10\">10</option>\r\n                <option value=\"20\">20</option>\r\n                <option value=\"30\">30</option>\r\n                <option value=\"40\">40</option>\r\n                <option value=\"50\">50</option>\r\n                <option value=\"60\">60</option>\r\n                <option value=\"70\">70</option>\r\n                <option value=\"80\">80</option>\r\n                <option value=\"90\" defaultValue>90</option>\r\n                <option value=\"100\">100</option>\r\n                <option value=\"110\">110</option>\r\n                <option value=\"120\">120</option>\r\n                <option value=\"130\">130</option>\r\n                <option value=\"140\">140</option>\r\n                <option value=\"150\">150</option>\r\n                <option value=\"160\">160</option>\r\n                <option value=\"170\">170</option>\r\n                <option value=\"180\">180</option>\r\n            </select>\r\n            <label htmlFor=\"words\">Words</label>\r\n            <textarea className=\"words\" value={lobby.words.join(',')} onChange={onWordsTextAreaChange} disabled={!isAdmin()}></textarea>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default LobbyOptions;\r\n","/** @module Lobby */\r\n\r\nimport React, { useEffect, useState } from 'react';\r\nimport LobbyOptions from './LobbyOptions';\r\nimport './Lobby.scss'\r\n\r\nfunction Lobby({setAppView, socket, lobby, setLobby, isAdmin}) \r\n{\r\n    const [buttonDisabled, setButtonDisabled] = useState(false);\r\n\r\n    useEffect(() => \r\n    {\r\n        /**\r\n         * Switches to the game view transmits to the server, that this socket is ready.\r\n         * @function joinGame\r\n         */\r\n        function joinGame()\r\n        {\r\n            setAppView('game');\r\n            socket.emit('ready');\r\n        }\r\n\r\n        socket.on('joinGame', joinGame);\r\n\r\n        return () => socket.off('joinGame');\r\n    }, [socket, setAppView]);\r\n\r\n    /**\r\n     * Transmits to the server, that others can start joining the game.\r\n     * Switches to the game view and transmits to the server, that this socket is ready.\r\n     * @function onClick\r\n     */\r\n    function onClick()\r\n    {\r\n        setButtonDisabled(true);\r\n        socket.emit('joinGame');\r\n        setAppView('game');\r\n        socket.emit('ready');\r\n    }\r\n\r\n    return (\r\n        <div className='Lobby'>\r\n            <h1>Lobby</h1>  \r\n            <strong>{window.location.protocol}//{window.location.host}/?id={lobby.id}</strong>\r\n            <div className='options-players'>\r\n                <LobbyOptions socket={socket} lobby={lobby} setLobby={setLobby} isAdmin={isAdmin} />\r\n                <div className='players'>\r\n                    <label htmlFor='player-list'>Players</label>\r\n                    <div className='player-list'>\r\n                        {lobby.players.map((player, index) => <p key={index}>{index + 1}. {player.nickname}</p>)}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <button onClick={onClick} disabled={!isAdmin() || buttonDisabled}>Start</button>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Lobby;\r\n","import React, { useEffect, useState } from 'react';\r\n\r\nfunction Player({lobby, index}) \r\n{\r\n    const [player, setPlayer] = useState(lobby.players[index]);\r\n\r\n    useEffect(() =>\r\n    {\r\n        setPlayer(lobby.players[index]);\r\n    }, [lobby, setPlayer, index])\r\n\r\n    return (\r\n        <div className='Player' style={{backgroundColor: player.onTurn ? '#6ed1ff' : player.guessed ? '#6eff8b' : 'gray'}}>\r\n            <p className='nickname'>{player.nickname}</p>\r\n            <p className=\"points\">{player.points}</p>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Player;","/** @module Chat */\r\n\r\nimport React, { useEffect, useState } from 'react'\r\nimport './Chat.scss'\r\n\r\nfunction Chat({socket, lobby, setLobby}) \r\n{\r\n    const [messages, setMessages] = useState([]);\r\n\r\n    useEffect(() =>\r\n    {\r\n        /**\r\n         * Adds the recieved message to the message array.\r\n         * @function messageSent\r\n         * @param {Object} message Object containing the message sender and the message's content.\r\n         */\r\n        function messageSent(message)\r\n        {\r\n            setMessages([...messages, message]);\r\n        }\r\n\r\n        /**\r\n         * Set the player's points and shows who guessed the word.\r\n         * @function playerGuessed\r\n         * @param {Object} data Object containing the player's socket id and the amount of points recieved.\r\n         */\r\n        function playerGuessed(data)\r\n        {\r\n            let newLobby = JSON.parse(JSON.stringify(lobby));\r\n            let index = newLobby.players.findIndex(player => player.id === data[0]);\r\n            newLobby.players[index].guessed = true;\r\n            newLobby.players[index].points += data[1];\r\n            newLobby.players[index].pointsThisTurn = data[1];\r\n            setLobby(newLobby);\r\n            setMessages([...messages, {value: 'Player ' + lobby.players[index].nickname + ' guessed the word!', raw: ''}]);\r\n        }\r\n\r\n        /**\r\n         * Writes out a message, that a word was nearly correct.\r\n         * @function playerNearGuess\r\n         * @param {string} word The word, which was close to the word being guessed.\r\n         */\r\n        function playerNearGuess(word)\r\n        {\r\n            setMessages([...messages, {value: '*' + word + '* was close!', raw: ''}]);\r\n        }\r\n\r\n        socket.on('messageSent', messageSent);\r\n        socket.on('playerGuessed', playerGuessed);\r\n        socket.on('playerNearGuess', playerNearGuess);\r\n\r\n        return () =>\r\n        {\r\n            socket.off('messageSent', messageSent);\r\n            socket.off('playerGuessed', playerGuessed);\r\n            socket.off('playerNearGuess', playerNearGuess);\r\n        }\r\n    }, [socket, lobby, setLobby, messages]);\r\n\r\n    /**\r\n     * Sends the message, when the user presses Enter.\r\n     * @function onKeyDown\r\n     * @param {Event} e OnKeyDown event object.\r\n     */\r\n    function onKeyDown(e)\r\n    {\r\n        if(e.key === 'Enter')\r\n        {\r\n            let message = {value: lobby.players.find(p => p.id === socket.id).nickname + ': ' + e.target.value, raw: e.target.value};\r\n            e.target.value = '';\r\n            setMessages([...messages, message]);\r\n            sendMessage(message);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Transmits the message to the server.\r\n     * @function sendMessage\r\n     * @param {Object} message Object containing the message sender and the message's content.\r\n     */\r\n    function sendMessage(message)\r\n    {\r\n        socket.emit('messageSent', message);\r\n    }\r\n    \r\n    return (\r\n        <div className='Chat'>\r\n            <div className='messages' >\r\n                {messages.map((message, index) => <p className='message' key={index}>{message.value}</p>)}\r\n            </div>\r\n            <input type='text' onKeyDown={onKeyDown} maxLength={40} />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Chat\r\n","/** @module DrawingOptions */\r\n\r\nimport React from 'react';\r\nimport './DrawingOptions.scss'\r\n\r\nfunction DrawingOptions({socket, isOnTurn, canvasRef, contextRef, drawColor, setDrawColor, setDrawMode, setDrawWidth}) \r\n{\r\n    const colors = ['#ffffff', \r\n                    '#000000', \r\n                    '#b9b9b9', \r\n                    '#7d8180', \r\n                    '#e0222c', \r\n                    '#92000d', \r\n                    '#f98a21', \r\n                    '#f4620b', \r\n                    '#ffd011', \r\n                    '#f5bb00', \r\n                    '#63ba2d', \r\n                    '#267637', \r\n                    '#78cdf2', \r\n                    '#009ada', \r\n                    '#0060b4', \r\n                    '#022c78', \r\n                    '#8b159f', \r\n                    '#5b1577', \r\n                    '#df177a', \r\n                    '#ab1b7a', \r\n                    '#ba5901', \r\n                    '#763100',];\r\n\r\n    const widths = [3, 10, 25, 50];\r\n\r\n    /**\r\n     * Changes the color and transmits it to others in the lobby if this socket is on turn.\r\n     * @function onColorChange\r\n     * @param {string} color Hex value of the new color. \r\n     */\r\n    function onColorChange(color)\r\n    {\r\n        if(isOnTurn())\r\n        {\r\n            setDrawColor(color);\r\n            socket.emit('colorChanged', color);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Changes the drawing mode and transmits it to the others in the lobby if this socket is on turn.\r\n     * @function onModeChange\r\n     * @param {Event} e Radio button click event.\r\n     */\r\n    function onModeChange(e)\r\n    {\r\n        if(isOnTurn())\r\n        {\r\n            setDrawMode(e.target.value);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Changes the brush width and transmits it to others in the lobby if this socket is on turn.\r\n     * @function onWidthChange\r\n     * @param {number} width New brush width value.\r\n     */\r\n    function onWidthChange(e)\r\n    {\r\n        if(isOnTurn())\r\n        {\r\n            setDrawWidth(e.target.value);\r\n            socket.emit('widthChanged', e.target.value);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Clears the canvas and transmits it to others in the lobby if this socket is on turn.\r\n     * @function onClearCanvas\r\n     */\r\n    function onClearCanvas()\r\n    {\r\n        if(isOnTurn())\r\n        {\r\n            contextRef.current.clearRect(0, 0, canvasRef.current.width, canvasRef.current.height);\r\n            socket.emit('clearCanvas');\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className='DrawingOptions'>\r\n                <div className='current-color' style={{backgroundColor: isOnTurn() ? drawColor : '#000000'}} />\r\n                <div className='colors'>\r\n                    {colors.map((color, index) => <button key={index} style={{backgroundColor: color}} onClick={() => onColorChange(color)} disabled={!isOnTurn()} />)}\r\n                </div>\r\n                <div className='drawing-modes' onChange={onModeChange}>\r\n                    <label>\r\n                        <input type='radio' name='mode' value={'brush'} defaultChecked disabled={!isOnTurn()} />\r\n                        <img src='images/brush.png' alt='brush.png' />\r\n                    </label>\r\n                    <label>\r\n                        <input type='radio' name='mode' value={'line'} disabled={!isOnTurn()} />\r\n                        <img src='images/line.png' alt='line.png' />\r\n                    </label>\r\n                </div>\r\n                <div className='brush-size' onChange={onWidthChange}>\r\n                    {widths.map((width, index) => \r\n                    <label>\r\n                        <input key={index} type='radio' name='width' value={width} defaultChecked={index === 1} disabled={!isOnTurn()} />\r\n                        <img src={'images/size' + (index + 1).toString() + '.png'} alt={'size' + (index + 1).toString() + '.png'} />\r\n                    </label>)}\r\n                </div>\r\n                <div className='clear-canvas'>\r\n                    <button onClick={() => onClearCanvas()} disabled={!isOnTurn()} />\r\n                </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default DrawingOptions;\r\n","/** @module Game */\r\n\r\nimport React, { useEffect, useRef, useState } from 'react';\r\nimport Player from './Player'\r\nimport Chat from './Chat/Chat';\r\nimport DrawingOptions from './DrawingOptions/DrawingOptions';\r\nimport './Game.scss'\r\n\r\nfunction Game({setAppView, socket, lobby, setLobby, isAdmin, isOnTurn}) \r\n{\r\n    const [overlayContent, setOverlayContent] = useState('');\r\n    const [overlayActive, setOverlayActive] = useState(' active');\r\n    const [time, setTime] = useState(lobby.time);\r\n    const [word, setWord] = useState('');\r\n    const [round, setRound] = useState(0);\r\n\r\n    const [drawColor, setDrawColor] = useState('#000000');\r\n    const [drawMode, setDrawMode] = useState('brush');\r\n    const [drawWidth, setDrawWidth] = useState(15);\r\n\r\n    const canvasRef = useRef(null);\r\n    const contextRef = useRef(null);\r\n\r\n    const timeCounter = useRef(-1);\r\n\r\n    useEffect(() =>\r\n    {\r\n        if(!isAdmin())\r\n            socket.emit('turnDataRequested', socket.id);\r\n        \r\n        setInterval(() => {\r\n            if(timeCounter.current >= 0)\r\n            {\r\n                setTime(timeCounter.current);\r\n                timeCounter.current--;\r\n            }\r\n        }, 1000);\r\n    }, []);\r\n\r\n    useEffect(() =>\r\n    {\r\n        const context = canvasRef.current.getContext('2d');\r\n        context.lineCap = 'round';\r\n        context.lineJoin = 'round';\r\n        context.strokeStyle = drawColor;\r\n        context.lineWidth = drawWidth;\r\n        context.beginPath();\r\n        contextRef.current = context;\r\n\r\n        /**\r\n         * Sets the new color.\r\n         * @function colorChanged\r\n         * @param {string} color Hex value of the new color.\r\n         */\r\n        function colorChanged(color)\r\n        {\r\n            setDrawColor(color);\r\n        }\r\n\r\n        /**\r\n         * Sets the new brush size.\r\n         * @function widthChanged\r\n         * @param {number} width New brush size.\r\n         */\r\n        function widthChanged(width)\r\n        {\r\n            setDrawWidth(width);\r\n        }\r\n\r\n        /**\r\n         * Clears the canvas.\r\n         * @function clearCanvas\r\n         */\r\n        function clearCanvas()\r\n        {\r\n            context.clearRect(0, 0, canvasRef.current.width, canvasRef.current.height);\r\n        }\r\n\r\n        /**\r\n         * If this socket is an admin, send the data to the socket that requested it.\r\n         * @function turnDataRequested\r\n         * @param {string} socketId Which socket requested the data.\r\n         */\r\n        function turnDataRequested(socketId)\r\n        {\r\n            if(isAdmin())\r\n            {\r\n                let bufferT = context.getImageData(0, 0, 800, 300).data.buffer;\r\n                let bufferB = context.getImageData(0, 300, 800, 300).data.buffer;\r\n                let arrayT = new Uint8ClampedArray(bufferT);\r\n                let arrayB = new Uint8ClampedArray(bufferB);\r\n                let array = [arrayT, arrayB];\r\n                let data = {socketId: socketId, timeCounter: timeCounter.current, pictureData: array};\r\n                socket.emit('turnDataSent', data);\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Sets the time and image data recieved from the admin.\r\n         * @function turnDataRequested\r\n         * @param {Object} data Object containing the lobby time and image data.\r\n         */\r\n        function turnDataSent(data)\r\n        {\r\n            setOverlayActive('');\r\n            if(data.timeCounter !== -1)\r\n                setTime(data.timeCounter - 1);\r\n            timeCounter.current = data.timeCounter - 1;\r\n            setWord(data.word);\r\n            setRound(data.round);\r\n\r\n            let arrayT = new Uint8ClampedArray(data.pictureData[0]);\r\n            let arrayB = new Uint8ClampedArray(data.pictureData[1]);\r\n            let imageT = new ImageData(arrayT, 800, 300);\r\n            let imageB = new ImageData(arrayB, 800, 300);\r\n            context.putImageData(imageT, 0, 0);\r\n            context.putImageData(imageB, 0, 300);\r\n        }\r\n\r\n        /**\r\n         * Sets the new turn data recieved and prepares for the next turn.\r\n         * @function newPlayerOnTurn\r\n         * @param {Object} data Object containing new turn data.\r\n         */\r\n        function newPlayerOnTurn(data)\r\n        {\r\n            let newLobby = JSON.parse(JSON.stringify(lobby));\r\n            newLobby.players.forEach(player =>\r\n            {\r\n                player.onTurn = false;\r\n                player.guessed = false;\r\n                player.pointsThisTurn = 0;\r\n            });\r\n            newLobby.players[data[0]].onTurn = true;\r\n            setLobby(newLobby);\r\n            \r\n            setWord(data[1]);\r\n\r\n            if(data[0] === lobby.players.findIndex(player => player.id === socket.id))\r\n            {\r\n                setOverlayContent(<p>YOU WILL BE DRAWING<br/>{data[1]}</p>);\r\n            }\r\n            else\r\n            {\r\n                setOverlayContent(<p>NEXT WILL BE DRAWING<br/>{lobby.players[data[0]].nickname}</p>);\r\n            }\r\n            \r\n            timeCounter.current = -1;\r\n            setTime(lobby.time);\r\n            if(data[0] === 0)\r\n                setRound(round + 1);\r\n            clearCanvas();\r\n        }\r\n\r\n        /**\r\n         * Hides the canvas overlay and sets the timer.\r\n         * @function startTurn\r\n         */\r\n        function startTurn()\r\n        {\r\n            setOverlayActive('');\r\n            timeCounter.current = lobby.time;\r\n        }\r\n\r\n        /**\r\n         * Shows the end turn overlay.\r\n         * @function endTurn\r\n         * @param {string} word This turn's word.\r\n         */\r\n        function endTurn(word)\r\n        {\r\n            let sortedPlayers = lobby.players.slice().sort((p1, p2) => p2.pointsThisTurn - p1.pointsThisTurn);\r\n            setOverlayContent(\r\n                <div>\r\n                    <p>The word was <b>{word}</b></p>\r\n                    {sortedPlayers.map((player, index) => <p key={index}>{player.nickname}: {player.pointsThisTurn}</p>)}\r\n                </div>\r\n            );\r\n            setOverlayActive(' active');\r\n        }\r\n\r\n        /**\r\n         * Shows the end game overlay.\r\n         * @function endGame\r\n         */\r\n        function endGame()\r\n        {\r\n            let sortedPlayers = lobby.players.slice().sort((p1, p2) => p2.points - p1.points);\r\n            setOverlayContent(\r\n                <div className='leaderboard'>\r\n                    <b>Game ended</b>\r\n                    <p className='first-place'>1. {sortedPlayers[0].nickname}: {sortedPlayers[0].points}</p>\r\n                    {lobby.players.length >= 2 && <p className='second-place'>2. {sortedPlayers[1].nickname}: {sortedPlayers[1].points}</p>}\r\n                    {lobby.players.length >= 3 && <p className='third-place'>3. {sortedPlayers[2].nickname}: {sortedPlayers[2].points}</p>}\r\n                </div>\r\n            );\r\n            setOverlayActive(' active');\r\n        }\r\n\r\n        function restartGame()\r\n        {\r\n            let newLobby = JSON.parse(JSON.stringify(lobby));\r\n            newLobby.players.forEach(player =>\r\n            {\r\n                player.points = 0;\r\n            });\r\n            setLobby(newLobby);\r\n            setAppView('lobby');\r\n        }\r\n\r\n        socket.on('startDrawing', startDrawing);\r\n        socket.on('draw', draw);\r\n        socket.on('colorChanged', colorChanged);\r\n        socket.on('widthChanged', widthChanged);\r\n        socket.on('clearCanvas', clearCanvas);\r\n        socket.on('turnDataRequested', turnDataRequested);\r\n        socket.on('turnDataSent', turnDataSent);\r\n        socket.on('newPlayerOnTurn', newPlayerOnTurn);\r\n        socket.on('startTurn', startTurn);\r\n        socket.on('endTurn', endTurn);\r\n        socket.on('endGame', endGame);\r\n        socket.on('restartGame', restartGame);\r\n\r\n        return () =>\r\n        {\r\n            socket.off('startDrawing', startDrawing);\r\n            socket.off('draw', draw);\r\n            socket.off('colorChanged', colorChanged);\r\n            socket.off('widthChanged', widthChanged);\r\n            socket.off('clearCanvas', clearCanvas);\r\n            socket.off('turnDataRequested', turnDataRequested);\r\n            socket.off('turnDataSent', turnDataSent);\r\n            socket.off('newPlayerOnTurn', newPlayerOnTurn);\r\n            socket.off('startTurn', startTurn);\r\n            socket.off('endTurn', endTurn);\r\n            socket.off('endGame', endGame);\r\n            socket.off('restartGame', restartGame);\r\n        }\r\n    }, [setAppView, socket, lobby, setLobby, isAdmin, time, setTime, round, drawColor, drawMode, drawWidth]);\r\n\r\n    /**\r\n     * Handles when user pressed the mouse inside the canvas.\r\n     * @function onMouseDown\r\n     * @param {Event} e Mouse down event.\r\n     */\r\n    function onMouseDown(e)\r\n    {\r\n        if(e.buttons !== 1 || !isOnTurn())\r\n            return;\r\n\r\n        let pos = getMousePos(e);\r\n\r\n        if(drawMode === 'brush')\r\n        {\r\n            startDrawing(pos);\r\n            draw(pos);\r\n    \r\n            socket.emit('startDrawing', pos);\r\n            socket.emit('draw', pos);\r\n        }\r\n        else if(drawMode === 'line')\r\n        {\r\n            startDrawing(pos);\r\n    \r\n            socket.emit('startDrawing', pos);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Handles when user depressed the mouse inside the canvas.\r\n     * @function onMouseUp\r\n     * @param {Event} e Mouse up event.\r\n     */\r\n    function onMouseUp(e)\r\n    {\r\n        if(e.button !== 0 || !isOnTurn())\r\n            return;\r\n\r\n        let pos = getMousePos(e);\r\n\r\n        if(drawMode === 'line')\r\n        {\r\n            draw(pos);\r\n    \r\n            socket.emit('draw', pos);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Handles when user moves the mouse inside the canvas.\r\n     * @function onMouseMove\r\n     * @param {Event} e Mouse move event.\r\n     */\r\n    function onMouseMove(e)\r\n    {\r\n        if(e.buttons !== 1 || !isOnTurn())\r\n            return;\r\n\r\n        let pos = getMousePos(e);\r\n\r\n        if(drawMode === 'brush')\r\n        {\r\n            draw(pos);\r\n    \r\n            socket.emit('draw', pos);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets the x, y position of the mouse event.\r\n     * @function getMousePos\r\n     * @param {Event} e Mouse event.\r\n     * @returns {Object} Object containing the mouse event's x, y position.\r\n     */\r\n    function getMousePos(e)\r\n    {\r\n        let rect = canvasRef.current.getBoundingClientRect();\r\n        let borderLeft = getComputedStyle(canvasRef.current).borderLeftWidth;\r\n        let borderTop = getComputedStyle(canvasRef.current).borderTopWidth;\r\n\r\n        const x = e.clientX - rect.left - borderLeft.substring(0, borderLeft.length - 2);\r\n        const y = e.clientY - rect.top - borderTop.substring(0, borderTop.length - 2);\r\n        let pos = {x: x, y: y};\r\n\r\n        return pos;\r\n    }\r\n\r\n    /**\r\n     * Starts the drawing action at the desired position.\r\n     * @function startDrawing\r\n     * @param {Object} pos Object containing the x, y position.\r\n     */\r\n    function startDrawing(pos)\r\n    {\r\n        contextRef.current.beginPath();\r\n        contextRef.current.moveTo(pos.x, pos.y);\r\n    }\r\n\r\n    /**\r\n     * Draws line toward the desired position.\r\n     * @function draw\r\n     * @param {Object} pos Object containing the x, y position.\r\n     */\r\n    function draw(pos)\r\n    {\r\n        contextRef.current.lineTo(pos.x, pos.y);\r\n        contextRef.current.stroke();\r\n    }\r\n\r\n    return (\r\n        <div className='Game'>\r\n            <h1>Game</h1>\r\n            <div className='info'>\r\n                <div className='time'>\r\n                    <p>Time: {time}</p>\r\n                </div>\r\n                <div className='word'>\r\n                    <p>{word}</p>\r\n                </div>\r\n                <div className='rounds'>\r\n                    <p>Round: {round}/{lobby.rounds}</p>\r\n                </div>\r\n            </div>\r\n            <div className='players-game-chat'>\r\n                <div className='player-list'>\r\n                    {lobby.players.map((_player, index) => <Player key={index} lobby={lobby} index={index}/>)}\r\n                </div>\r\n                <div className='canvas'>\r\n                    <div className={'overlay' + overlayActive}>\r\n                        {overlayContent}\r\n                    </div>\r\n                    <canvas width='800' height='600' ref={canvasRef} onMouseDown={onMouseDown} onMouseUp={onMouseUp} onMouseMove={onMouseMove} />\r\n                </div>\r\n                <Chat socket={socket} lobby={lobby} setLobby={setLobby} />\r\n            </div>\r\n            <DrawingOptions socket={socket} isOnTurn={isOnTurn} canvasRef={canvasRef} contextRef={contextRef} drawColor={drawColor} setDrawColor={setDrawColor} setDrawMode={setDrawMode} setDrawWidth={setDrawWidth} />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Game;\r\n","/** @module App */\r\n\r\nimport { useState, useEffect } from 'react';\r\nimport io from 'socket.io-client';\r\nimport Home from '../Home/Home';\r\nimport Lobby from '../Lobby/Lobby';\r\nimport Game from '../Game/Game'\r\nimport './App.scss'\r\n\r\nfunction App() \r\n{\r\n    const [appView, setAppView] = useState('home'); //home, lobby, game\r\n    const [socket, setSocket] = useState();\r\n    const [lobby, setLobby] = useState();\r\n\r\n    useEffect(() => \r\n    {\r\n        const newSocket = io();\r\n        setSocket(newSocket);\r\n\r\n        return () => \r\n        {\r\n            newSocket.close();\r\n        }\r\n    }, [setSocket]);\r\n\r\n    useEffect(() =>\r\n    {\r\n        /**\r\n         * Adds the newly joined player to the lobby.\r\n         * @function playerJoined\r\n         * @param {Object} player Object containing the player's data.\r\n         */\r\n        function playerJoined(player)\r\n        {\r\n            let newLobby = JSON.parse(JSON.stringify(lobby));\r\n            newLobby.players.push(player);\r\n            setLobby(newLobby);\r\n        }\r\n\r\n        /**\r\n         * Removes the disconnected player from the lobby.\r\n         * @function playerDisconnected\r\n         * @param {string} id Id of the player, that disconnected.\r\n         */\r\n        function playerDisconnected(id)\r\n        {\r\n            let newLobby = JSON.parse(JSON.stringify(lobby));\r\n            let index = newLobby.players.findIndex(player => player.id === id);\r\n            newLobby.players.splice(index, 1);\r\n            setLobby(newLobby);\r\n        }\r\n\r\n        if(socket)\r\n        {\r\n            socket.on('playerJoined', playerJoined);\r\n            socket.on('playerDisconnected', playerDisconnected);\r\n        }\r\n\r\n        return () => \r\n        {\r\n            if(socket)\r\n            {\r\n                socket.off('playerJoined', playerJoined);\r\n                socket.off('playerDisconnected', playerDisconnected);\r\n            }\r\n        }\r\n    }, [socket, lobby, setLobby]);\r\n\r\n    /**\r\n     * Returns whether this socket is an admin.\r\n     * @function isAdmin\r\n     * @returns {boolean} Whether this socket is an admin.\r\n     */\r\n    function isAdmin()\r\n    {\r\n        return socket.id === lobby.players[0].id;\r\n    }\r\n\r\n    /**\r\n     * Returns whether this socket is on turn.\r\n     * @function isOnTurn\r\n     * @returns {boolean} Whether this socket is on turn.\r\n     */\r\n    function isOnTurn()\r\n    {\r\n        return lobby.players.find(p => socket.id === p.id).onTurn;\r\n    }\r\n\r\n    return (\r\n        <div className='App'>\r\n            {appView === 'home' && socket && <Home setAppView={setAppView} socket={socket} setLobby={setLobby} />}\r\n            {appView === 'lobby' && lobby && <Lobby setAppView={setAppView} socket={socket} lobby={lobby} setLobby={setLobby} isAdmin={isAdmin} />}\r\n            {appView === 'game' && <Game setAppView={setAppView} socket={socket} lobby={lobby} setLobby={setLobby} isAdmin={isAdmin} isOnTurn={isOnTurn} />}\r\n            <footer>© Daniel Martinek 2022 <a href='https://github.com/cubebuc/mega-masterpiece'>GitHub</a> <a href='/docs'>Documentation</a></footer>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './components/App/App';\r\n\r\nReactDOM.render\r\n(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);"],"sourceRoot":""}